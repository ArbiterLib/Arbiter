<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateDependency</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>ae18220cbeb522a6c0344bf0c11140dfe</Anchor>
    <Abstract>Creates a dependency which specifies a version requirement of the given project. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateDependencyList</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a0118f0f1cccc5b9c7204b46264d334c3</Anchor>
    <Abstract>Creates a dependency list which wraps a C array of ArbiterDependency objects. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateProjectIdentifier</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a7de65d449c28f8303e921783db237e21</Anchor>
    <Abstract>Creates a project identifier from the given opaque data. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateResolvedDependency</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a1da4a1651859b463c36b273752854a66</Anchor>
    <Abstract>Creates a fully resolved dependency referring to the specified version of the given project...</Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateResolvedDependencyList</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>aa15607856dd36d027aa07c151b6751e2</Anchor>
    <Abstract>Creates a resolved dependency list which wraps a C array of ArbiterResolvedDependency objects...</Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependencyProject</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a6fbdf8158145ccdded1dd44eaaf2be36</Anchor>
    <Abstract>Returns the project identified by this dependency. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependencyRequirement</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a267152a90840563ded5a4e8b9b88cad0</Anchor>
    <Abstract>Returns the version requirement of this dependency. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterFreeDependency</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a5f80f7b9dcc9aa5840d29ee2901696a1</Anchor>
    <Abstract>Releases the memory associated with a dependency object. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterFreeDependencyList</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a28d8873e472d8960ac1e91b295a761cc</Anchor>
    <Abstract>Releases the memory associated with a dependency list. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterFreeProjectIdentifier</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a5735a7ffdabaa994813567d5066a6b9f</Anchor>
    <Abstract>Releases the memory associated with a project identifier. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterFreeResolvedDependency</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a0a22a55c58805e403de89033457b9f4b</Anchor>
    <Abstract>Releases the memory associated with a resolved dependency. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterFreeResolvedDependencyList</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a011c6505116050ee973882f807052131</Anchor>
    <Abstract>Releases the memory associated with a resolved dependency list. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterProjectIdentifierValue</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>ae9a49ddf74167ba7df7f03ce05df116a</Anchor>
    <Abstract>Returns the opaque data which was provided to ArbiterCreateProjectIdentifier(). </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyListCount</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>af8f8246f8d8fbd6992042a6c20c148f3</Anchor>
    <Abstract>Returns the number of items in the given list. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyListGetAll</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a1c941c6f8dbd3bc150feb6b0d26d5f3f</Anchor>
    <Abstract>Copies pointers to all of the resolved dependencies in the given list, into the C array buffer...</Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyListGetIndex</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>ad1e3828d40058e24d99bb7f75d9edba7</Anchor>
    <Abstract>Returns a pointer to the item at the given index in the list, which must be in bounds. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyProject</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a211126c78b8362b634453487c433dda7</Anchor>
    <Abstract>Returns the project this resolved dependency refers to. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>acf07101e6aa3d594bbd66b1799c8a8b7</Anchor>
    <Abstract>Returns the version which was selected for this resolved dependency. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>src_2_dependency_8h.html</Path>
    <Anchor>a506d6bc052044d7a86f4a79d2e61c886</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>src_2_dependency_8h.html</Path>
    <Anchor>af5662e0468189524987864d0ce47dd04</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>src_2_dependency_8h.html</Path>
    <Anchor>af2d0e8a943fb8d0bb8a67e6aa10ae004</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>src_2_dependency_8h.html</Path>
    <Anchor>ae15929fb900269c5c127e16415daa5da</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateRequirementAny</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>ab8fa853f54f8f3624acec0ed17695c50</Anchor>
    <Abstract>Creates a requirement which will match any version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateRequirementAtLeast</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>a164b5dbddf86d6d39aac3c21836a2f9a</Anchor>
    <Abstract>Creates a requirement which will match versions not less than the specified version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateRequirementCompatibleWith</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>acbf4c4b6206ff5f59a31a575f09c41e9</Anchor>
    <Abstract>Creates a requirement which will match versions that are &quot;compatible with&quot; the given version...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateRequirementExactly</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>a3fb84244d1362d2b02e30a827166d409</Anchor>
    <Abstract>Creates a requirement which will only match the specified version, including any prerelease version a...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterEqualRequirements</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>a6fba7539e9c02642fcdc79acdc031109</Anchor>
    <Abstract>Checks whether two requirements are equivalent. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterFreeRequirement</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>a53341511ab8c7fba76e7baa5b486df2d</Anchor>
    <Abstract>Releases the memory associated with a requirement object. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterRequirementSatisfiedBy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>ae491ecfe24f281bb34cfa742c6c76fe5</Anchor>
    <Abstract>Determines whether the given requirement is satisfied by the given version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterRequirementStrictnessStrict</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>a11ce26a584153a37e54d73ed50088fe5ae9aebd3157b7010f3b6e438a9f022c27</Anchor>
    <Abstract>Determine compatibility according to a strict interpretation of SemVer. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterRequirementStrictnessAllowVersionZeroPatches</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>a11ce26a584153a37e54d73ed50088fe5ad264b77b9ac0379e76d14b6d56570199</Anchor>
    <Abstract>According to SemVer, technically all 0.y.z releases can break backwards compatibility, meaning that minor and patch versions have to match exactly in order to be &quot;compatible.&quot;. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>src_2_requirement_8h.html</Path>
    <Anchor>aec822e69ff6e37dda6c67c24fc700f90</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateResolver</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_resolver_8h.html</Path>
    <Anchor>ae9d62bf4a862c49649fac81a3db58adb</Anchor>
    <Abstract>Creates a dependency resolver, implemented using the given behaviors, which will attempt to pick comp...</Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterFreeResolver</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_resolver_8h.html</Path>
    <Anchor>a981b62a0d255b1cea4f3e689e0bdcb69</Anchor>
    <Abstract>Releases the memory associated with a dependency resolver. </Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolverContext</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_resolver_8h.html</Path>
    <Anchor>a75b6c5e452ea46b04c8c20571dd9498d</Anchor>
    <Abstract>Returns any context data which was provided to ArbiterCreateResolver(). </Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolverCreateResolvedDependencyList</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_resolver_8h.html</Path>
    <Anchor>ad9d4604df5123414f984aac71e1063da</Anchor>
    <Abstract>Attempts to resolve all dependencies. </Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>src_2_resolver_8h.html</Path>
    <Anchor>a80bbc86ad188fb0b927f9ef7e1a84587</Anchor>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>src_2_value_8h.html</Path>
    <Anchor>a0cbbba06d9a26b9b806a63c8ecb5bf0f</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCompareVersionOrdering</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a9f2f418f3c237dd22cf0fd9c570e9282</Anchor>
    <Abstract>Orders two semantic versions relative to each other. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateSelectedVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a10a48316d9fe53bbb03ca825b6aede54</Anchor>
    <Abstract>Creates a selected version which corresponds to the given semantic version. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateSelectedVersionList</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a2a73ed5429e64678dd9d93f96dddce04</Anchor>
    <Abstract>Creates a version list which wraps a C array of ArbiterSelectedVersion objects. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateSemanticVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a27dd48159dbc855ca290f55d0e9fc299</Anchor>
    <Abstract>Creates a semantic version with the given components. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateSemanticVersionFromString</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>af4e5aa3f0b2f888377149a5bf67d28e2</Anchor>
    <Abstract>Attempts to parse the given NUL-terminated string into a semantic version, returning NULL if a parse ...</Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterEqualSelectedVersions</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a4739dd668feb854f63d8d99a9ad7a170</Anchor>
    <Abstract>Returns whether the two selected versions are equivalent. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterEqualVersions</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a076544fb41154ba974a54361343bd2fa</Anchor>
    <Abstract>Checks whether two versions are equal in every component, including those which may not participate i...</Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterFreeSelectedVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a901dec118885ae6753bcab8464dd4f48</Anchor>
    <Abstract>Releases the memory associated with a selected version object. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterFreeSelectedVersionList</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a1c9e6c2a919e3231ba367c1012ab3401</Anchor>
    <Abstract>Releases the memory associated with a version list. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterFreeSemanticVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>adc727be4523308d364f369a0f005d4a8</Anchor>
    <Abstract>Releases the memory associated with a version object. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterGetBuildMetadata</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a21ff3211cabef158b268257106ffd231</Anchor>
    <Abstract>Returns the build metadata string from a semantic version, or NULL if there is not one associated wit...</Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterGetMajorVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a14b23e4030a59c28102289beab2cec4e</Anchor>
    <Abstract>Returns the major version number (X.y.z) from a semantic version. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterGetMinorVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a471e9b05b540d8efc80737d29f11b38b</Anchor>
    <Abstract>Returns the minor version number (x.Y.z) from a semantic version. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterGetPatchVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a1e428cb93990de40fb284bca2a6f6b3c</Anchor>
    <Abstract>Returns the patch version number (x.y.Z) from a semantic version. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterGetPrereleaseVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a0c485c0aa5b651d576acc7a0b6f88e69</Anchor>
    <Abstract>Returns the prerelease version string from a semantic version, or NULL if there is not one associated...</Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSelectedVersionMetadata</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>aa75b8ec3b12a076b5cd748c1c465cc79</Anchor>
    <Abstract>Returns any metadata pointer which was provided to ArbiterCreateSelectedVersion(). </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSelectedVersionSemanticVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a91dafaf64fb02b4f1f0c0e63b37d5a8f</Anchor>
    <Abstract>Returns the semantic version which corresponds to the given selected version. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>src_2_version_8h.html</Path>
    <Anchor>a11d0d2c94442e91dbdc97db20bf361ab</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>src_2_version_8h.html</Path>
    <Anchor>a3ceb0abab8fc985a9f559c17a56eb9e6</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>src_2_version_8h.html</Path>
    <Anchor>aec376d1954fd09c259c83ca520602075</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>maybeAt</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>afdfd994bc91edf366d1acd8469e6017e</Anchor>
    <Abstract>Looks up a key in a map, returning the corresponding value if it exists. </Abstract>
    <DeclaredIn>Algorithm.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reset</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a06a8b9c7372bcb77fd89b3a423016f0e</Anchor>
    <Abstract>Resets a swappable value to its default constructor. </Abstract>
    <DeclaredIn>Algorithm.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_exception_8h.html</Path>
    <Anchor>a1bd757a3ccca0b86552b12de5a4afb91</Anchor>
    <DeclaredIn>Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hashOf</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a7c177714e947121b6413560c539678a0</Anchor>
    <Abstract>Hashes an arbitrary value that has an std::hash specialization. </Abstract>
    <DeclaredIn>Hash.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IteratorResultVector</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a94a393a7560bf93adc8bab571d5e5854</Anchor>
    <Abstract>The result type of an iterator which yields dynamically-created vectors. </Abstract>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeIteratorRange</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a26165c9469283c29c39f2ab8b81b5347</Anchor>
    <Abstract>Creates an IteratorRange encompassing the entirety of the given collection. </Abstract>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeIteratorRange</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a5f1578878f0a745be155f724ebb0d3aa</Anchor>
    <Abstract>Creates an IteratorRange encompassing the entirety of the given read-only collection. </Abstract>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeOptional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a4b82513a599ffc981e266727d81e816b</Anchor>
    <Abstract>Creates an Optional from a value, inferring its type. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a1d6bb8d6cdbfd55339357539ceb16d80</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>copyAcquireCString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a7314319b682320ab1b01dfd3f7876cc4</Anchor>
    <Abstract>Returns a string which is a copy of str, which will then be freed. </Abstract>
    <DeclaredIn>ToString.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>copyCString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>af0c3788361a5e2d3e88ed665498fec62</Anchor>
    <Abstract>Returns a unique_ptr which wraps a NUL-terminated copy of the c_str() of the given string...</Abstract>
    <DeclaredIn>ToString.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a15c4c9cb7a48232e28ad2165fa35d1b3</Anchor>
    <Abstract>Converts an arbitrary value into a string, using operator&lt;&lt;. </Abstract>
    <DeclaredIn>ToString.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>acquireCString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>acc4e6b2707595090e00a60bbb81f3f82</Anchor>
    <Abstract>Returns a unique_ptr which takes ownership of str. </Abstract>
    <DeclaredIn>ToString.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>md_CONTRIBUTING</Name>
      <APILanguage>markdown</APILanguage>
    </TokenIdentifier>
    <Path>md_CONTRIBUTING.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>md_LICENSE</Name>
      <APILanguage>markdown</APILanguage>
    </TokenIdentifier>
    <Path>md_LICENSE.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependency</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Abstract>Represents a dependency specification, which consists of a project identifier and a version requireme...</Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependency</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>a18646b35930fe215549d90f40c6b7fb7</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependency</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>a5db242ea37875c7ad5db0658c1380b0b</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>ada15f6ccabbb37c903c5196eddd1df92</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>a8f739e52f29c04ef8c2e5ce175862671</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>a8c87e4e2586752a40c2e600c02a2c09f</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>requirement</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>aee1b768080ebb2a3e8de8acee573fcf4</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_projectIdentifier</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>a6d689040e0aad5aa5f77c956de9123e0</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependencyList</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Abstract>Represents a list of dependencies. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependencyList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>a9aa2c8abc462de6fdc88e8af39429e4f</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependencyList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>af2b9274aa6d6b7a3949274c73100a2af</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependencyList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>ae2d35a204c0b46feffbf7eb52902ad99</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependencyList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>a135f95801b2ab3f386ca5b62b130a94e</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>abc68a72a017cfd8dab52adb4b505b01b</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>a646b783bb794c037f21f988149cce5e6</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_dependencies</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>a97ae63be6483d202ae8c5bbeb5fa56f6</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterProjectIdentifier</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Abstract>An opaque value which identifies a project participating in dependency resolution. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>a4c25c9af6da917d4e111d17115fd59f5</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterProjectIdentifier</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>aae2ae2fdf64117cb99a0190f578703a3</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterProjectIdentifier</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>a8c28e3259150288a9be44d39a998cb79</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>af6441e0c2d5e2b5f12cc0525053ecac0</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>aa8338dd3768d5b5bf269eb954dd272c8</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>a919c5e9749d14d53aac182a7b6db77ba</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>a86429cc4755c14bc209df117bc0e2a2e</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterRequirement</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Abstract>Represents a requirement for a specific version or set of versions. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~ArbiterRequirement</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a047d4a05356a389f581c635d7e8d9b2e</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>aa0a4382f74c2ac504ab391b473f2b9de</Anchor>
    <Abstract>Creates a copy of this requirement (including its dynamic type). </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>intersect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a154df9eef873c0cdb2c1470f8ac9eb8b</Anchor>
    <Abstract>Attempts to create a requirement which expresses the intersection of this requirement and the given o...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a817a41700a2eb366dee80ec5a462f34f</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a82161e1baaa12ed1206f8ea77e313864</Anchor>
    <Abstract>Returns whether this requirement is equivalent to the given one. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>aec26c2d8f8ace95bcaebde074c93b50f</Anchor>
    <Abstract>Returns whether this requirement would be satisfied by using the given version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a14e6877e7bae9b4e477ab31fbf3dc3bc</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a5d9d40e896f8eccf73a8b33d4839b877</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>ffunc</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>aec822e69ff6e37dda6c67c24fc700f90</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependency</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterResolvedDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency.html</Path>
    <Abstract>Represents a dependency which has been resolved to a specific version. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependency</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency.html</Path>
    <Anchor>a4f167e3c39287973c68c5c2a9db1e9f0</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency.html</Path>
    <Anchor>a9e8ddecbfec5905b0eff57927f48e023</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency.html</Path>
    <Anchor>a0b19374f51b35b3bd2ddda0b640bfd12</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_project</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterResolvedDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency.html</Path>
    <Anchor>a2f3abc0c734ca77e89630294451609de</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_version</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterResolvedDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency.html</Path>
    <Anchor>addf77cd937a0ca7c20f9872671cf285c</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyList</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterResolvedDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_list.html</Path>
    <Abstract>Represents a list of resolved dependencies. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_list.html</Path>
    <Anchor>a8f9db5c6503eccfe7b326b4f91c3a356</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_list.html</Path>
    <Anchor>affe61dbe6fbca873c4c248dc5c832e9e</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_list.html</Path>
    <Anchor>a5f3d9a1a307ae7c69af77591b0b0bf83</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_list.html</Path>
    <Anchor>a3060cc0ee1d17625562b337d9ff8669e</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_list.html</Path>
    <Anchor>a69df2d0423c138acceea418f11bdd069</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_list.html</Path>
    <Anchor>a4354f29851168c1a0208d90bc152853d</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_dependencies</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterResolvedDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_list.html</Path>
    <Anchor>a19ceecabc8e893de9134fb887c90731b</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolver</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Abstract>A dependency resolver which contains context about how to evaluate the dependency graph...</Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Context</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>a2a7258fe1962fbf1ed5e4fd923b57a39</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolver</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>a1211dac3e9d2ae7ae6ab8a21f06711fd</Anchor>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>availableVersionsSatisfying</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>aa86e4d0ed05739bd3ca8d3d62d99e769</Anchor>
    <Abstract>Computes a list of available versions for the specified project which satisfy the given requirement...</Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fetchAvailableVersions</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>a62c3379058d6baca4625d5afceb2d107</Anchor>
    <Abstract>Fetches the list of available versions for the given project. </Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fetchDependencies</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>a3e9ec2a7efe6a1c20d5c15efa189a362</Anchor>
    <Abstract>Fetches the list of dependencies for the given project and version. </Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>resolve</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>aecf6a39dc44552f9ecc7b3174a643b5d</Anchor>
    <Abstract>Attempts to resolve all dependencies. </Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_context</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>a913aeaac961482fc0184e1be380a5d10</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolverBehaviors</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterResolverBehaviors</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver_behaviors.html</Path>
    <Abstract>User-provided behaviors for how dependency resolution should work. </Abstract>
    <DeclaredIn>arbiter/Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createAvailableVersionsList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterResolverBehaviors</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver_behaviors.html</Path>
    <Anchor>abb9023a56e27eb92c69a7f578199d8be</Anchor>
    <Abstract>Requests the list of versions available for a given project. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createDependencyList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterResolverBehaviors</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver_behaviors.html</Path>
    <Anchor>a50916cf4567d3ba2fcc425d9ebe96a28</Anchor>
    <Abstract>Requests the list of dependencies needed by a specific version of a project. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSelectedVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Abstract>Represents a &quot;selected&quot; version, which is a concrete choice of a real project version. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Metadata</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>a883198df77e7d43882095daa57e2fb02</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSelectedVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>aa0419ae1103f4277236ab6e8ef1d85c7</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>ad7166bafd063c07cf2eb2e2929651a03</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>aac7c8b36f437e2f21ffbf14aee84fa20</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>ad6efe700233437c71bfd4ac5efe8200e</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>ae1013b083003d44934e867c095f0fb61</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>ac411474bc6ac13cfdfcb8729c679afdf</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>a67b664cc3f9a0c6b5874a38bcb8f9f08</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_metadata</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>a3c2870d90dc94174d4be6addc33862ae</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_semanticVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>a7440b93a72fd6d0646c3df0709936ea8</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSelectedVersionList</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterSelectedVersionList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version_list.html</Path>
    <Abstract>Represents a list of selected versions. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSelectedVersionList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersionList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version_list.html</Path>
    <Anchor>a9f90fefa9407ac232c4cec145148beee</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSelectedVersionList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersionList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version_list.html</Path>
    <Anchor>aa5e441bd0d03ba5e2418ea6324015bdc</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_versions</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSelectedVersionList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version_list.html</Path>
    <Anchor>ad273ed0c04d6356c8df1596bdd3b8bb2</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSemanticVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Abstract>Represents a semantic version, as defined by semver.org. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSemanticVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a0b46dd969de2b8b678d75bb6e355634a</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>aec2e8ff2e29c040df88d7659568da41f</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a66a46414be289f85e85a57d7e2a57b5e</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a4658a1d84aaacc9c528405a609f2f441</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>af65327f600a0351a5fcdfc158a154377</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>ad74a0b5391bd77aa4a5c32a8ad8dc7b8</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a9ccfd9dcb2b667e58cc9fac55932acf9</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a202eeeb164ea227fc869d17ef3b7d90e</Anchor>
    <Abstract>Attempts to parse a well-formed semantic version from a string. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_buildMetadata</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a704f664242e1e765f692419ea1e21810</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_major</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>aa40218723a2c55f5b25a3853d8175fdf</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_minor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>aa06ae0e067e7b4ea5291e82e65c5f5fe</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_patch</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a6f635c501dbec7602e1b092f0e3e724f</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_prereleaseVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a4c9e7a3d6669b55029f98cef482f7726</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterUserValue</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterUserValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_value.html</Path>
    <Abstract>Represents an arbitrary value that can be associated with Arbiter data types and functionality. </Abstract>
    <DeclaredIn>arbiter/Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createDescription</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterUserValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_value.html</Path>
    <Anchor>a24b7de90b02aa6e93e6ff39669022cb0</Anchor>
    <Abstract>An operation to convert this data object to a string. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterUserValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_value.html</Path>
    <Anchor>a21ad42b0d600af18edb221b0cc7a2870</Anchor>
    <Abstract>The underlying data object. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>destructor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterUserValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_value.html</Path>
    <Anchor>a46326f865baa51148191f64d69846e5f</Anchor>
    <Abstract>A cleanup function to call when the ArbiterUserValue is done being used. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>equalTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterUserValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_value.html</Path>
    <Anchor>a58ad30575098fbeaba0cf57bf4fa80ac</Anchor>
    <Abstract>An equality operation over two data objects. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>lessThan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterUserValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_value.html</Path>
    <Anchor>a5581905b82a24eefd853a6ed055cde0f</Anchor>
    <Abstract>Returns whether first is less than (should be ordered before) second. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IteratorResultVector</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a94a393a7560bf93adc8bab571d5e5854</Anchor>
    <Abstract>The result type of an iterator which yields dynamically-created vectors. </Abstract>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>copyAcquireCString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a7314319b682320ab1b01dfd3f7876cc4</Anchor>
    <Abstract>Returns a string which is a copy of str, which will then be freed. </Abstract>
    <DeclaredIn>ToString.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>copyCString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>af0c3788361a5e2d3e88ed665498fec62</Anchor>
    <Abstract>Returns a unique_ptr which wraps a NUL-terminated copy of the c_str() of the given string...</Abstract>
    <DeclaredIn>ToString.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hashOf</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a7c177714e947121b6413560c539678a0</Anchor>
    <Abstract>Hashes an arbitrary value that has an std::hash specialization. </Abstract>
    <DeclaredIn>Hash.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeIteratorRange</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a26165c9469283c29c39f2ab8b81b5347</Anchor>
    <Abstract>Creates an IteratorRange encompassing the entirety of the given collection. </Abstract>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeIteratorRange</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a5f1578878f0a745be155f724ebb0d3aa</Anchor>
    <Abstract>Creates an IteratorRange encompassing the entirety of the given read-only collection. </Abstract>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeOptional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a4b82513a599ffc981e266727d81e816b</Anchor>
    <Abstract>Creates an Optional from a value, inferring its type. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>maybeAt</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>afdfd994bc91edf366d1acd8469e6017e</Anchor>
    <Abstract>Looks up a key in a map, returning the corresponding value if it exists. </Abstract>
    <DeclaredIn>Algorithm.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a1d6bb8d6cdbfd55339357539ceb16d80</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reset</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a06a8b9c7372bcb77fd89b3a423016f0e</Anchor>
    <Abstract>Resets a swappable value to its default constructor. </Abstract>
    <DeclaredIn>Algorithm.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a15c4c9cb7a48232e28ad2165fa35d1b3</Anchor>
    <Abstract>Converts an arbitrary value into a string, using operator&lt;&lt;. </Abstract>
    <DeclaredIn>ToString.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>acquireCString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>acc4e6b2707595090e00a60bbb81f3f82</Anchor>
    <Abstract>Returns a unique_ptr which takes ownership of str. </Abstract>
    <DeclaredIn>ToString.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::IteratorRange</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Arbiter::IteratorRange</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_iterator_range.html</Path>
    <Abstract>Represents a pair of iterators bracketing the start and end of a range. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IteratorRange</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::IteratorRange</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_iterator_range.html</Path>
    <Anchor>a12d25712d6376d28b13ca4368f47e3ec</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_begin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::IteratorRange</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_iterator_range.html</Path>
    <Anchor>adccd6a1189b08ef2babe2ad4f9b71137</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_end</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::IteratorRange</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_iterator_range.html</Path>
    <Anchor>a43dbba1ed47b73473d4136d62df6fb6d</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::MultipassIterator</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Arbiter::MultipassIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_multipass_iterator.html</Path>
    <Abstract>Contains the state necessary to perform an algorithm over an iterator multiple times. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MultipassIterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::MultipassIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_multipass_iterator.html</Path>
    <Anchor>a4d9b059e35c2f01bad9ae651553fc673</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MultipassIterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::MultipassIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_multipass_iterator.html</Path>
    <Anchor>ab7a8c58804ad6d9c5d4a6c8f59d25bd5</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MultipassIterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::MultipassIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_multipass_iterator.html</Path>
    <Anchor>abb8fe44afe4be69298e977e081429c64</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MultipassIterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::MultipassIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_multipass_iterator.html</Path>
    <Anchor>a93ac06b6807ddca1bab8f688ed9776a7</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator bool</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::MultipassIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_multipass_iterator.html</Path>
    <Anchor>afb7abbf3b345d6e267ae3b59ebab263f</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::MultipassIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_multipass_iterator.html</Path>
    <Anchor>aa44ce193e69d4cd91d580313aca8f5b9</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::MultipassIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_multipass_iterator.html</Path>
    <Anchor>af0c817447315a29ea7199a49c0856437</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reset</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::MultipassIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_multipass_iterator.html</Path>
    <Anchor>aefc371ed3541c2fe0f3f28c03ffd7474</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Optional</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Abstract>Represents a value which may or may not exist. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>ac7286ea9106e97c4960a2ab1bf0a30e4</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a7cab27d27a8b07ece2c8ac811ec15ce0</Anchor>
    <Abstract>Creates an empty Optional. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>abb0208a623c70842ef2dfa08267d6054</Anchor>
    <Abstract>Creates an empty Optional. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a31d1defc6884d9d87aa27d2f9887166c</Anchor>
    <Abstract>Creates an Optional containing a copy of the given value. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a12eed362a9115a098e30294d6d7dd19c</Anchor>
    <Abstract>Creates an Optional containing the given value. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>afc3fb10d4fe7d66035da60c55bac8ddd</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>ac3a225ecf6d8fd018878581504ac9d94</Anchor>
    <Abstract>Converts from another Optional containing a compatible type. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>ae2eb3543d5eec037600bbb95569cc96c</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a08266cbe814b6be9503158915e2facb0</Anchor>
    <Abstract>Converts from another Optional containing a compatible type. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a44d6dd8c9529cae4f719b35f4509a7be</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator bool</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>abcd003292c015ccde7218b4a8b2860d5</Anchor>
    <Abstract>Returns true if this Optional contains a value, or false if it is empty. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a71fbb329eb7bf4f224882768c0e2fe1f</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>ad0d7e1a2e103398b72284abc86eaeb84</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>afd33da27d67b8736460e2b64aedea999</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a54ff087410fb993d90790e3876cf3f8d</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a006f8d063762614ced4d57e13a675fa5</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>ab9a1947868059d25520796b4d3954757</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pointer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>aadf0e3fa1cfe29239b909f342700da30</Anchor>
    <Abstract>Returns a pointer to the value in the Optional, or nullptr if empty. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pointer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a6c7bed08143902d064584a90686a12ae</Anchor>
    <Abstract>Returns a pointer to the value in the Optional, or nullptr if empty. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a67b927fa3eaddc25997dff085a0b43d1</Anchor>
    <Abstract>Accesses the value in the Optional. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>ab0f363163225390d70f9edc0b86ca680</Anchor>
    <Abstract>Accesses the value in the Optional. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::PermutationIterator</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Arbiter::PermutationIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_permutation_iterator.html</Path>
    <Abstract>An iterator which generates every possible combination of the values of other iterators. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PermutationIterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::PermutationIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_permutation_iterator.html</Path>
    <Anchor>a4d5265385a22860b1593efd69ca5734d</Anchor>
    <Abstract>Creates an empty iterator. </Abstract>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PermutationIterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::PermutationIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_permutation_iterator.html</Path>
    <Anchor>ae7122e1e586cfd7f1abb5cb8bed815a3</Anchor>
    <Abstract>Creates an iterator which will create all possible combinations between the given ranges...</Abstract>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator bool</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::PermutationIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_permutation_iterator.html</Path>
    <Anchor>a8bdb37f88ea1ed9dc81f05988e21b8e7</Anchor>
    <Abstract>Returns whether the iterator is valid (i.e., dereferenceable). </Abstract>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::PermutationIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_permutation_iterator.html</Path>
    <Anchor>a04cae7b97e6c09d63ffe7da78c07ca1d</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::PermutationIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_permutation_iterator.html</Path>
    <Anchor>af99840af54fc68caae6b1058e1e19b0c</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::PermutationIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_permutation_iterator.html</Path>
    <Anchor>a7cd4ca9995a189a7dc058869ca2c58c5</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::PermutationIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_permutation_iterator.html</Path>
    <Anchor>ade84314f66d4f373ae5ecb97ccde84e5</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::PermutationIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_permutation_iterator.html</Path>
    <Anchor>afa3e56963bfca89f693bc4d0c519d5dc</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::SharedUserValue</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Abstract>Expresses shared ownership of opaque user-provided data, which was originally described in an Arbiter...</Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SharedUserValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a5be9212601a489641488e914aef1f5df</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SharedUserValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>ada413b15e8db1702aeb58f63d9dab7fd</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>ab1848961bb2e8175356faebdde486521</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a4db7260742928ac4898de4fe520105f5</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>description</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a00f6ccc566bbebf60645a35126a4b4ea</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a66587d89a3eb3b90f2cd53418bb0a5c2</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>accdfdbf00561a461039bc22a646aaaad</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a233b1ddc23b26ed7d607e4fe0d926051</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a68809201ace5637f3e6e76bf221d6275</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a8e50dcc777757f9945050f0c47a97702</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a77ce5e722f734967f098e46d8742bd8a</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Exception</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>Arbiter::Exception</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter_1_1_exception.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Exception::Base</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Exception::Base</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_base.html</Path>
    <Abstract>Base type for Arbiter exceptions. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Base</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Exception::Base</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_base.html</Path>
    <Anchor>a6ddd88907768207d9b8a1540e241eec5</Anchor>
    <DeclaredIn>Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Base</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Exception::Base</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_base.html</Path>
    <Anchor>a2243931aeb7b6d102780345141ff92db</Anchor>
    <DeclaredIn>Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Exception::MutuallyExclusiveConstraints</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Exception::MutuallyExclusiveConstraints</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_mutually_exclusive_constraints.html</Path>
    <Abstract>Exception type indicating that there were mutually exclusive constraints in a proposed dependency gra...</Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MutuallyExclusiveConstraints</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Exception::MutuallyExclusiveConstraints</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_mutually_exclusive_constraints.html</Path>
    <Anchor>ad2d6c4d299a18fa20c3b15a17adb22e2</Anchor>
    <DeclaredIn>Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Exception::UnsatisfiableConstraints</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Exception::UnsatisfiableConstraints</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_unsatisfiable_constraints.html</Path>
    <Abstract>Exception type indicating that there were unsatisfiable constraints for the selected versions in a pr...</Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UnsatisfiableConstraints</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Exception::UnsatisfiableConstraints</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_unsatisfiable_constraints.html</Path>
    <Anchor>a5350881d69f0c4523ca241c75366c819</Anchor>
    <DeclaredIn>Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Exception::UserError</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Exception::UserError</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_user_error.html</Path>
    <Abstract>Exception type representing an error that was returned from Arbiter client code. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UserError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Exception::UserError</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_user_error.html</Path>
    <Anchor>aa6f8bf174919c720eed120e296597317</Anchor>
    <DeclaredIn>Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UserError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Exception::UserError</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_user_error.html</Path>
    <Anchor>a2c2f043158e7bcd1454d212bfb351e11</Anchor>
    <DeclaredIn>Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Requirement</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>Arbiter::Requirement</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter_1_1_requirement.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Requirement::Any</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Abstract>A requirement satisfied by any version. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Anchor>af7f20fa6276c2c62a23c851aa5770816</Anchor>
    <Abstract>Creates a copy of this requirement (including its dynamic type). </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>intersect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Anchor>a9ddcd37781e3ec05490e5fe5cc871b51</Anchor>
    <Abstract>Attempts to create a requirement which expresses the intersection of this requirement and the given o...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a817a41700a2eb366dee80ec5a462f34f</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Anchor>a3b16f09fcc1098a15db3360d0bb29ed5</Anchor>
    <Abstract>Returns whether this requirement is equivalent to the given one. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Anchor>a2bfb9b5f16f6d0cea148015daa662fbf</Anchor>
    <Abstract>Returns whether this requirement would be satisfied by using the given version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Anchor>a48d99887052d9f43255729e13bb86382</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Anchor>ab180a7e82a4e19ca9037214c3d9aa2b5</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Requirement::AtLeast</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Abstract>A requirement satisfied only by versions greater than or equal to the specified one. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AtLeast</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>a73c21686e5e593b532b8c61328f71ba1</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>ab4e8255cd4ed8eb3f908e5fc0f285cf7</Anchor>
    <Abstract>Creates a copy of this requirement (including its dynamic type). </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>intersect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>acfe14edebee6a90191ba05687cfab5ac</Anchor>
    <Abstract>Attempts to create a requirement which expresses the intersection of this requirement and the given o...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a817a41700a2eb366dee80ec5a462f34f</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>a09d8f1afd4d7308a604c52b3e14c8c14</Anchor>
    <Abstract>Returns whether this requirement is equivalent to the given one. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>ae5deff9851d560548803cbc2b7dd1c7c</Anchor>
    <Abstract>Returns whether this requirement would be satisfied by using the given version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_minimumVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>a9bf0d27047931565ad1c4732cb005902</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>afaca70c755039939a96663c89a9af3f6</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>a38901907e9be6c1a5182c102f320928e</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Requirement::CompatibleWith</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Abstract>A requirement satisfied only by versions which are &quot;compatible with&quot; the specified one...</Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CompatibleWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>a02bfcf4d29d86c926d75179a35e9959b</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>a77a3bb1d31d0a64524c941a5c8c864ef</Anchor>
    <Abstract>Creates a copy of this requirement (including its dynamic type). </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>intersect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>a37dc0eb4e75a2af9d1048d55b51aabc1</Anchor>
    <Abstract>Attempts to create a requirement which expresses the intersection of this requirement and the given o...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a817a41700a2eb366dee80ec5a462f34f</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>a7ddbcfbb67b3c3c4e041b7a96d6420ea</Anchor>
    <Abstract>Returns whether this requirement is equivalent to the given one. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>ae2f335aa8f68d6ae87d498f643f12cea</Anchor>
    <Abstract>Returns whether this requirement would be satisfied by using the given version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_baseVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>a8a940d45a588bf07f80f75b712eb991c</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_strictness</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>aeebab6823ceef5aaa58b5d5ec5805d94</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>a0451138e83193de099bcbeb08fa8fbd0</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>ad78f28e06645072137e31c6f6ff87a10</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Requirement::Exactly</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Abstract>A requirement satisfied only by one exact version. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Exactly</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>a099e9e4b9a8435f61d191f0b2b2a8563</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>ac684a1bf851d2d5588e1c7c4eefa1a54</Anchor>
    <Abstract>Creates a copy of this requirement (including its dynamic type). </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>intersect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>aae1eb8b87778822f875f3682dc019ef3</Anchor>
    <Abstract>Attempts to create a requirement which expresses the intersection of this requirement and the given o...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a817a41700a2eb366dee80ec5a462f34f</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>ad6e08e7cd1b68c41221d0d3e7c99104b</Anchor>
    <Abstract>Returns whether this requirement is equivalent to the given one. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>ae8edbb1d836966b7b5f1264a135c7ad3</Anchor>
    <Abstract>Returns whether this requirement would be satisfied by using the given version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_version</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>aad38e1acf5d44a6941d40c46900ed335</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>a25ce37c745539db525ba7036f70dc858</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>a12d85bdf24d9e39fe88a93014f3fefdf</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Resolver</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>Arbiter::Resolver</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter_1_1_resolver.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Resolver::DependencyGraph</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Resolver::DependencyGraph</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_resolver_1_1_dependency_graph.html</Path>
    <Abstract>Represents an acyclic dependency graph in which each project appears at most once. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Resolver::DependencyGraph</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_resolver_1_1_dependency_graph.html</Path>
    <Anchor>aa66315f94f0f117493f2ecfe839ff784</Anchor>
    <Abstract>Attempts to add the given node into the graph, as a dependency of dependent if specified. </Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allNodes</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Resolver::DependencyGraph</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_resolver_1_1_dependency_graph.html</Path>
    <Anchor>ab2631a0fd5a2c1a064406f1437eac923</Anchor>
    <Abstract>Returns a list of all nodes in the graph, in no particular order. </Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Resolver::DependencyGraph</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_resolver_1_1_dependency_graph.html</Path>
    <Anchor>a6175aa0dad35ebc4e1916dfa8e3d887e</Anchor>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; Arbiter::Optional&lt; T &gt; &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; Arbiter::Optional&lt; T &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_1_1_optional_3_01_t_01_4_01_4.html</Path>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; Arbiter::Optional&lt; T &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_1_1_optional_3_01_t_01_4_01_4.html</Path>
    <Anchor>a52460037cf96a0590045fc00615ac0b8</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; ArbiterDependency &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; ArbiterDependency &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_dependency_01_4.html</Path>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; ArbiterDependency &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_dependency_01_4.html</Path>
    <Anchor>a008de161b013f3a8c3a3e04dd3fb3ee2</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; ArbiterProjectIdentifier &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; ArbiterProjectIdentifier &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_project_identifier_01_4.html</Path>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; ArbiterProjectIdentifier &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_project_identifier_01_4.html</Path>
    <Anchor>a156c9bda8b50f2513d1ac43342346e35</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; ArbiterRequirement &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; ArbiterRequirement &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_requirement_01_4.html</Path>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; ArbiterRequirement &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_requirement_01_4.html</Path>
    <Anchor>a501993e1a96ab9e40ddbec9a98373ae6</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; ArbiterResolvedDependency &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; ArbiterResolvedDependency &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_resolved_dependency_01_4.html</Path>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; ArbiterResolvedDependency &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_resolved_dependency_01_4.html</Path>
    <Anchor>a84a5e582f8b330d9f63c06bd5d797423</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; ArbiterSelectedVersion &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; ArbiterSelectedVersion &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_selected_version_01_4.html</Path>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; ArbiterSelectedVersion &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_selected_version_01_4.html</Path>
    <Anchor>aed3d58d7862a302ca313f84e78205b28</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; ArbiterSemanticVersion &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; ArbiterSemanticVersion &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_semantic_version_01_4.html</Path>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; ArbiterSemanticVersion &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_semantic_version_01_4.html</Path>
    <Anchor>a29e5dada823e852b3aae7808cddd6b8f</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
</Tokens>
