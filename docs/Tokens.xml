<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateDependency</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a3bf17516554bec956745a5fc50b04ea8</Anchor>
    <Abstract>Creates a dependency which specifies a version requirement of the given project. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateDependencyList</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a9ca351cdd64f264aaebecc3f26288238</Anchor>
    <Abstract>Creates a dependency list which wraps a C array of ArbiterDependency objects. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateProjectIdentifier</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a7de65d449c28f8303e921783db237e21</Anchor>
    <Abstract>Creates a project identifier from the given opaque data. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateResolvedDependency</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a2f90aa87b11cf22b3c32c2856d4128ad</Anchor>
    <Abstract>Creates a fully resolved dependency referring to the specified version of the given project...</Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependencyProject</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a6fbdf8158145ccdded1dd44eaaf2be36</Anchor>
    <Abstract>Returns the project identified by this dependency. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependencyRequirement</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a46b7999c6765fd1cd9d1489538d2947d</Anchor>
    <Abstract>Returns the version requirement of this dependency. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterProjectIdentifierValue</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>ae9a49ddf74167ba7df7f03ce05df116a</Anchor>
    <Abstract>Returns the opaque data which was provided to ArbiterCreateProjectIdentifier(). </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyGraphCount</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a4b570096c9694f0d6637b1dd84c0c0a5</Anchor>
    <Abstract>Returns the number of unique nodes in the given graph, for use with ArbiterResolvedDependencyGraphGet...</Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyGraphCountAtDepth</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a110ef41e76d4c9dcbb716354e9ae6d17</Anchor>
    <Abstract>Returns the number of projects which exist at the given zero-based &quot;depth index. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyGraphDepth</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>ad883efe177417fcc485632fa1524d4c6</Anchor>
    <Abstract>Returns the depth of the graph, for use with ArbiterResolvedDependencyGraphCountAtDepth() and Arbiter...</Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyGraphGetAll</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a1e68f3f23369b6b7e36c9b32b070880a</Anchor>
    <Abstract>Copies pointers to all of the resolved dependencies in the given graph, into the C array buffer...</Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyGraphGetAllAtDepth</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>ac27f992aa67e46275b9b421deacdf464</Anchor>
    <Abstract>Copies pointers to the resolved dependencies which exist at the given zero-based &quot;depth index...</Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyProject</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a211126c78b8362b634453487c433dda7</Anchor>
    <Abstract>Returns the project this resolved dependency refers to. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a633409a35c08cb6fed6db83eed6bf50d</Anchor>
    <Abstract>Returns the version which was selected for this resolved dependency. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateRequirementAny</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>ab8fa853f54f8f3624acec0ed17695c50</Anchor>
    <Abstract>Creates a requirement which will match any version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateRequirementAtLeast</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>acae406bd4df23195003c8c9ca652aa2b</Anchor>
    <Abstract>Creates a requirement which will match versions not less than the specified version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateRequirementCompatibleWith</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>a196744216b770334427efb73b264616f</Anchor>
    <Abstract>Creates a requirement which will match versions that are &quot;compatible with&quot; the given version...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateRequirementExactly</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>a567222f500e84283df815ec0ba4f1cfb</Anchor>
    <Abstract>Creates a requirement which will only match the specified version, including any prerelease version a...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterRequirementSatisfiedBy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>a8e4ce8bcb901efe413c83785c02c049f</Anchor>
    <Abstract>Determines whether the given requirement is satisfied by the given version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterRequirementStrictnessStrict</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>a11ce26a584153a37e54d73ed50088fe5ae9aebd3157b7010f3b6e438a9f022c27</Anchor>
    <Abstract>Determine compatibility according to a strict interpretation of SemVer. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterRequirementStrictnessAllowVersionZeroPatches</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>a11ce26a584153a37e54d73ed50088fe5ad264b77b9ac0379e76d14b6d56570199</Anchor>
    <Abstract>According to SemVer, technically all 0.y.z releases can break backwards compatibility, meaning that minor and patch versions have to match exactly in order to be &quot;compatible.&quot;. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateResolver</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_resolver_8h.html</Path>
    <Anchor>a20607e85a4aaa0838293dd764bf38cdf</Anchor>
    <Abstract>Creates a dependency resolver, implemented using the given behaviors, which will attempt to pick comp...</Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolverContext</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_resolver_8h.html</Path>
    <Anchor>a75b6c5e452ea46b04c8c20571dd9498d</Anchor>
    <Abstract>Returns any context data which was provided to ArbiterCreateResolver(). </Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolverCreateResolvedDependencyGraph</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_resolver_8h.html</Path>
    <Anchor>a5efe4c91a22e7acd84d0cf20c78d513f</Anchor>
    <Abstract>Attempts to resolve all dependencies. </Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateCopy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_types_8h.html</Path>
    <Anchor>a967537a5789b2134a33116a65260abd7</Anchor>
    <Abstract>Creates a copy of an Arbiter object. </Abstract>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateDescription</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_types_8h.html</Path>
    <Anchor>aa4d785bb08d81f4147ac1657860c8f5f</Anchor>
    <Abstract>Creates a NUL-terminated string description of an Arbiter object. </Abstract>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterEqual</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_types_8h.html</Path>
    <Anchor>aea8da7965ab8070d8c3c323f925ae050</Anchor>
    <Abstract>Returns whether two Arbiter objects are equal. </Abstract>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterFree</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_types_8h.html</Path>
    <Anchor>ab3baf6244ea94c955233d6715c00e8af</Anchor>
    <Abstract>Frees an Arbiter object. </Abstract>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>src_2_types_8h.html</Path>
    <Anchor>a241a529114bc559fd3dec66b5c562b44</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>src_2_value_8h.html</Path>
    <Anchor>a0cbbba06d9a26b9b806a63c8ecb5bf0f</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCompareVersionOrdering</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a9f2f418f3c237dd22cf0fd9c570e9282</Anchor>
    <Abstract>Orders two semantic versions relative to each other. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateSelectedVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a10a48316d9fe53bbb03ca825b6aede54</Anchor>
    <Abstract>Creates a selected version which corresponds to the given semantic version. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateSelectedVersionList</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a07f6210a32dde270ac1b29338c5f25c3</Anchor>
    <Abstract>Creates a version list which wraps a C array of ArbiterSelectedVersion objects. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateSemanticVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a27dd48159dbc855ca290f55d0e9fc299</Anchor>
    <Abstract>Creates a semantic version with the given components. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateSemanticVersionFromString</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>af4e5aa3f0b2f888377149a5bf67d28e2</Anchor>
    <Abstract>Attempts to parse the given NUL-terminated string into a semantic version, returning NULL if a parse ...</Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterGetBuildMetadata</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a21ff3211cabef158b268257106ffd231</Anchor>
    <Abstract>Returns the build metadata string from a semantic version, or NULL if there is not one associated wit...</Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterGetMajorVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a14b23e4030a59c28102289beab2cec4e</Anchor>
    <Abstract>Returns the major version number (X.y.z) from a semantic version. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterGetMinorVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a471e9b05b540d8efc80737d29f11b38b</Anchor>
    <Abstract>Returns the minor version number (x.Y.z) from a semantic version. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterGetPatchVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a1e428cb93990de40fb284bca2a6f6b3c</Anchor>
    <Abstract>Returns the patch version number (x.y.Z) from a semantic version. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterGetPrereleaseVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a0c485c0aa5b651d576acc7a0b6f88e69</Anchor>
    <Abstract>Returns the prerelease version string from a semantic version, or NULL if there is not one associated...</Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSelectedVersionMetadata</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>aa75b8ec3b12a076b5cd748c1c465cc79</Anchor>
    <Abstract>Returns any metadata pointer which was provided to ArbiterCreateSelectedVersion(). </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSelectedVersionSemanticVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a91dafaf64fb02b4f1f0c0e63b37d5a8f</Anchor>
    <Abstract>Returns the semantic version which corresponds to the given selected version. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>maybeAt</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>afdfd994bc91edf366d1acd8469e6017e</Anchor>
    <Abstract>Looks up a key in a map, returning the corresponding value if it exists. </Abstract>
    <DeclaredIn>Algorithm.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reset</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a06a8b9c7372bcb77fd89b3a423016f0e</Anchor>
    <Abstract>Resets a swappable value to its default constructor. </Abstract>
    <DeclaredIn>Algorithm.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_exception_8h.html</Path>
    <Anchor>a1bd757a3ccca0b86552b12de5a4afb91</Anchor>
    <DeclaredIn>Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hashOf</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a7c177714e947121b6413560c539678a0</Anchor>
    <Abstract>Hashes an arbitrary value that has an std::hash specialization. </Abstract>
    <DeclaredIn>Hash.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IteratorResultVector</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a94a393a7560bf93adc8bab571d5e5854</Anchor>
    <Abstract>The result type of an iterator which yields dynamically-created vectors. </Abstract>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeIteratorRange</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a26165c9469283c29c39f2ab8b81b5347</Anchor>
    <Abstract>Creates an IteratorRange encompassing the entirety of the given collection. </Abstract>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeIteratorRange</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a5f1578878f0a745be155f724ebb0d3aa</Anchor>
    <Abstract>Creates an IteratorRange encompassing the entirety of the given read-only collection. </Abstract>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeOptional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a4b82513a599ffc981e266727d81e816b</Anchor>
    <Abstract>Creates an Optional from a value, inferring its type. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a1d6bb8d6cdbfd55339357539ceb16d80</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>copyAcquireCString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a7314319b682320ab1b01dfd3f7876cc4</Anchor>
    <Abstract>Returns a string which is a copy of str, which will then be freed. </Abstract>
    <DeclaredIn>ToString.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>copyCString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>af0c3788361a5e2d3e88ed665498fec62</Anchor>
    <Abstract>Returns a unique_ptr which wraps a NUL-terminated copy of the c_str() of the given string...</Abstract>
    <DeclaredIn>ToString.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a15c4c9cb7a48232e28ad2165fa35d1b3</Anchor>
    <Abstract>Converts an arbitrary value into a string, using operator&lt;&lt;. </Abstract>
    <DeclaredIn>ToString.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>acquireCString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>acc4e6b2707595090e00a60bbb81f3f82</Anchor>
    <Abstract>Returns a unique_ptr which takes ownership of str. </Abstract>
    <DeclaredIn>ToString.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>md_CONTRIBUTING</Name>
      <APILanguage>markdown</APILanguage>
    </TokenIdentifier>
    <Path>md_CONTRIBUTING.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>md_LICENSE</Name>
      <APILanguage>markdown</APILanguage>
    </TokenIdentifier>
    <Path>md_LICENSE.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependency</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Abstract>Represents a dependency specification, which consists of a project identifier and a version requireme...</Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependency</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>a18646b35930fe215549d90f40c6b7fb7</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependency</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>a5db242ea37875c7ad5db0658c1380b0b</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>a1dc45488b33c44ba617ccdee75ee8573</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>ad8b41b9bb8f0cfcb6a113615cc4b1d09</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a531914803ab5722a848f51b36a866d23</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>ada15f6ccabbb37c903c5196eddd1df92</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>a8f739e52f29c04ef8c2e5ce175862671</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>aea159dc9ac4ca032e31175cc81ce3300</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>requirement</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>aee1b768080ebb2a3e8de8acee573fcf4</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_projectIdentifier</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>a6d689040e0aad5aa5f77c956de9123e0</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependencyList</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Abstract>Represents a list of dependencies. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependencyList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>a9aa2c8abc462de6fdc88e8af39429e4f</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependencyList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>af2b9274aa6d6b7a3949274c73100a2af</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependencyList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>ae2d35a204c0b46feffbf7eb52902ad99</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependencyList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>a135f95801b2ab3f386ca5b62b130a94e</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>afe4e5476d4a53e1705f939cf076a091a</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>a6ffe91420c171d2dcc18dd616e8d4830</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a531914803ab5722a848f51b36a866d23</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>abc68a72a017cfd8dab52adb4b505b01b</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>a646b783bb794c037f21f988149cce5e6</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>aa69a234f28b189e229b86242d84a17db</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_dependencies</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>a97ae63be6483d202ae8c5bbeb5fa56f6</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterProjectIdentifier</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Abstract>An opaque value which identifies a project participating in dependency resolution. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>a4c25c9af6da917d4e111d17115fd59f5</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterProjectIdentifier</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>aae2ae2fdf64117cb99a0190f578703a3</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterProjectIdentifier</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>a8c28e3259150288a9be44d39a998cb79</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>aaaac2a46d6259325bf3b7ba096d6032e</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>aa2f1bb7f30002465c1a39e1553ed22dc</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a531914803ab5722a848f51b36a866d23</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>aa8338dd3768d5b5bf269eb954dd272c8</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>acac8eb2576226af678ef5804dad1334d</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>a86429cc4755c14bc209df117bc0e2a2e</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterRequirement</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Abstract>Represents a requirement for a specific version or set of versions. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a36499ee4dd9e6821f72b0af03b86b731</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cloneRequirement</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a1231089736b96e5dab43d90a08bbfb2d</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>adbc261eb40b20d3a185e0355049f60a4</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a5d9d40e896f8eccf73a8b33d4839b877</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>intersect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a154df9eef873c0cdb2c1470f8ac9eb8b</Anchor>
    <Abstract>Attempts to create a requirement which expresses the intersection of this requirement and the given o...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a531914803ab5722a848f51b36a866d23</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a3dee918ed636c26db8c9367f4a504d96</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>aec26c2d8f8ace95bcaebde074c93b50f</Anchor>
    <Abstract>Returns whether this requirement would be satisfied by using the given version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependency</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterResolvedDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency.html</Path>
    <Abstract>Represents a dependency which has been resolved to a specific version. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependency</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency.html</Path>
    <Anchor>a4f167e3c39287973c68c5c2a9db1e9f0</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency.html</Path>
    <Anchor>a8ec3a664cf07b7f06c50d9a2cb233c01</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency.html</Path>
    <Anchor>a0ca93b4d8aea63e44d9f09bc8826ea07</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a531914803ab5722a848f51b36a866d23</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency.html</Path>
    <Anchor>ae14fcc4d09e555d74759005f67d992bf</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_project</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterResolvedDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency.html</Path>
    <Anchor>a2f3abc0c734ca77e89630294451609de</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_version</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterResolvedDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency.html</Path>
    <Anchor>addf77cd937a0ca7c20f9872671cf285c</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyGraph</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterResolvedDependencyGraph</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph.html</Path>
    <Abstract>Represents a resolved dependency graph, preserving relationships between dependencies. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DepthSet</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ArbiterResolvedDependencyGraph</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph.html</Path>
    <Anchor>acdb142d459a494e66449e1b57366a614</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyGraph</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyGraph</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph.html</Path>
    <Anchor>a8804467e485fe9e7266293c7fff456b1</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyGraph</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph.html</Path>
    <Anchor>a48e9f194b51f78f25ec7d699e533d3fc</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>contains</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyGraph</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph.html</Path>
    <Anchor>a022bdc7fc66f3a3f03a0fcacd4f5e8e2</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>count</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyGraph</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph.html</Path>
    <Anchor>aef421d2bb05ad6d4668ca3bc314ee66b</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>countAtDepth</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyGraph</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph.html</Path>
    <Anchor>a8d3ca153338fbc0aac6f191b0cb69835</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>depth</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyGraph</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph.html</Path>
    <Anchor>ade30737227051c1f0c71aea8da9a5efa</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyGraph</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph.html</Path>
    <Anchor>a4a76e8cbee90995bb1ed284fc37cc958</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a531914803ab5722a848f51b36a866d23</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyGraph</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph.html</Path>
    <Anchor>a7e3db4d797ad4e879197385917a9f514</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_depths</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterResolvedDependencyGraph</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph.html</Path>
    <Anchor>a29ea95e83612764507fa07247cfa6777</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolver</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Abstract>A dependency resolver which contains context about how to evaluate the dependency graph...</Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolver</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>a4db20c7b8839314114cd980b963f212e</Anchor>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolver</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>a73c3122e49679288bf62e5b6083ccd73</Anchor>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>availableVersionsSatisfying</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>aa86e4d0ed05739bd3ca8d3d62d99e769</Anchor>
    <Abstract>Computes a list of available versions for the specified project which satisfy the given requirement...</Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>a28e1d2d502abfbc8ecfe4a7881797339</Anchor>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>a938812d347f4bb4a17166ba122e1176f</Anchor>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fetchAvailableVersions</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>a62c3379058d6baca4625d5afceb2d107</Anchor>
    <Abstract>Fetches the list of available versions for the given project. </Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fetchDependencies</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>a3e9ec2a7efe6a1c20d5c15efa189a362</Anchor>
    <Abstract>Fetches the list of dependencies for the given project and version. </Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a531914803ab5722a848f51b36a866d23</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>acd7fba5859a07c6710a42182187f19f7</Anchor>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>a585e58622f45f1c72c3347e89d203a69</Anchor>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>resolve</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>aed77f5e43cd1fd0f56087a35aef4bf82</Anchor>
    <Abstract>Attempts to resolve all dependencies. </Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_context</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>a7b2c6fdaa22e0223d5807275a9ebd87a</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolverBehaviors</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterResolverBehaviors</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver_behaviors.html</Path>
    <Abstract>User-provided behaviors for how dependency resolution should work. </Abstract>
    <DeclaredIn>arbiter/Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createAvailableVersionsList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterResolverBehaviors</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver_behaviors.html</Path>
    <Anchor>a5e58d671818c4ceb8dd4ba62d6fd42a9</Anchor>
    <Abstract>Requests the list of versions available for a given project. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createDependencyList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterResolverBehaviors</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver_behaviors.html</Path>
    <Anchor>a8a53fd0268af2d9b9c4933ca9c87c271</Anchor>
    <Abstract>Requests the list of dependencies needed by a specific version of a project. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSelectedVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Abstract>Represents a &quot;selected&quot; version, which is a concrete choice of a real project version. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Metadata</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>a883198df77e7d43882095daa57e2fb02</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSelectedVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>aa0419ae1103f4277236ab6e8ef1d85c7</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>a520f84d8692f89bcaaf5a63670742bbe</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>a7e40bd24c8bc966ce300af7f0309fa8b</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a531914803ab5722a848f51b36a866d23</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>aac7c8b36f437e2f21ffbf14aee84fa20</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>ad6efe700233437c71bfd4ac5efe8200e</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>abbe9cfc456727ab300d49b2b375af4a5</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>ac411474bc6ac13cfdfcb8729c679afdf</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>a67b664cc3f9a0c6b5874a38bcb8f9f08</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_metadata</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>a3c2870d90dc94174d4be6addc33862ae</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_semanticVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>a7440b93a72fd6d0646c3df0709936ea8</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSelectedVersionList</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterSelectedVersionList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version_list.html</Path>
    <Abstract>Represents a list of selected versions. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSelectedVersionList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersionList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version_list.html</Path>
    <Anchor>a9f90fefa9407ac232c4cec145148beee</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSelectedVersionList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersionList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version_list.html</Path>
    <Anchor>aa5e441bd0d03ba5e2418ea6324015bdc</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersionList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version_list.html</Path>
    <Anchor>a596b9d2ca1fe33360151fdae331bd8ff</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersionList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version_list.html</Path>
    <Anchor>a366c03f9535d254b22afbbb0e10eb835</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a531914803ab5722a848f51b36a866d23</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersionList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version_list.html</Path>
    <Anchor>ad0c8093543d93c9198e2c1fa2a64305c</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_versions</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSelectedVersionList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version_list.html</Path>
    <Anchor>ad273ed0c04d6356c8df1596bdd3b8bb2</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSemanticVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Abstract>Represents a semantic version, as defined by semver.org. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSemanticVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a0b46dd969de2b8b678d75bb6e355634a</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>acdd9d60b9c5ad1c969c42983687e88b1</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a0865ba34bfce47255b2d70846690f612</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a531914803ab5722a848f51b36a866d23</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a66a46414be289f85e85a57d7e2a57b5e</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a4658a1d84aaacc9c528405a609f2f441</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a028ad1c27160639ae0c2c346682c7adb</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>ad74a0b5391bd77aa4a5c32a8ad8dc7b8</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a9ccfd9dcb2b667e58cc9fac55932acf9</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a202eeeb164ea227fc869d17ef3b7d90e</Anchor>
    <Abstract>Attempts to parse a well-formed semantic version from a string. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_buildMetadata</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a704f664242e1e765f692419ea1e21810</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_major</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>aa40218723a2c55f5b25a3853d8175fdf</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_minor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>aa06ae0e067e7b4ea5291e82e65c5f5fe</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_patch</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a6f635c501dbec7602e1b092f0e3e724f</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_prereleaseVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a4c9e7a3d6669b55029f98cef482f7726</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterUserValue</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterUserValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_value.html</Path>
    <Abstract>Represents an arbitrary value that can be associated with Arbiter data types and functionality. </Abstract>
    <DeclaredIn>arbiter/Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createDescription</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterUserValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_value.html</Path>
    <Anchor>a24b7de90b02aa6e93e6ff39669022cb0</Anchor>
    <Abstract>An operation to convert this data object to a string. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterUserValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_value.html</Path>
    <Anchor>a21ad42b0d600af18edb221b0cc7a2870</Anchor>
    <Abstract>The underlying data object. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>destructor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterUserValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_value.html</Path>
    <Anchor>a46326f865baa51148191f64d69846e5f</Anchor>
    <Abstract>A cleanup function to call when the ArbiterUserValue is done being used. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>equalTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterUserValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_value.html</Path>
    <Anchor>a58ad30575098fbeaba0cf57bf4fa80ac</Anchor>
    <Abstract>An equality operation over two data objects. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterUserValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_value.html</Path>
    <Anchor>a0bbe1c09aa9b1d1ae8872d613576e6d5</Anchor>
    <Abstract>Generates a hash of the data object. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>lessThan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterUserValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_value.html</Path>
    <Anchor>a5581905b82a24eefd853a6ed055cde0f</Anchor>
    <Abstract>Returns whether first is less than (should be ordered before) second. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IteratorResultVector</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a94a393a7560bf93adc8bab571d5e5854</Anchor>
    <Abstract>The result type of an iterator which yields dynamically-created vectors. </Abstract>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>copyAcquireCString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a7314319b682320ab1b01dfd3f7876cc4</Anchor>
    <Abstract>Returns a string which is a copy of str, which will then be freed. </Abstract>
    <DeclaredIn>ToString.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>copyCString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>af0c3788361a5e2d3e88ed665498fec62</Anchor>
    <Abstract>Returns a unique_ptr which wraps a NUL-terminated copy of the c_str() of the given string...</Abstract>
    <DeclaredIn>ToString.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hashOf</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a7c177714e947121b6413560c539678a0</Anchor>
    <Abstract>Hashes an arbitrary value that has an std::hash specialization. </Abstract>
    <DeclaredIn>Hash.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeIteratorRange</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a26165c9469283c29c39f2ab8b81b5347</Anchor>
    <Abstract>Creates an IteratorRange encompassing the entirety of the given collection. </Abstract>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeIteratorRange</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a5f1578878f0a745be155f724ebb0d3aa</Anchor>
    <Abstract>Creates an IteratorRange encompassing the entirety of the given read-only collection. </Abstract>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeOptional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a4b82513a599ffc981e266727d81e816b</Anchor>
    <Abstract>Creates an Optional from a value, inferring its type. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>maybeAt</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>afdfd994bc91edf366d1acd8469e6017e</Anchor>
    <Abstract>Looks up a key in a map, returning the corresponding value if it exists. </Abstract>
    <DeclaredIn>Algorithm.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a1d6bb8d6cdbfd55339357539ceb16d80</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reset</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a06a8b9c7372bcb77fd89b3a423016f0e</Anchor>
    <Abstract>Resets a swappable value to its default constructor. </Abstract>
    <DeclaredIn>Algorithm.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a15c4c9cb7a48232e28ad2165fa35d1b3</Anchor>
    <Abstract>Converts an arbitrary value into a string, using operator&lt;&lt;. </Abstract>
    <DeclaredIn>ToString.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>acquireCString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>acc4e6b2707595090e00a60bbb81f3f82</Anchor>
    <Abstract>Returns a unique_ptr which takes ownership of str. </Abstract>
    <DeclaredIn>ToString.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Base</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Abstract>Base class for public-facing Arbiter types, such that they automatically get freeing, cloning, equality, and description functionality. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~Base</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>acf308cb34de270b459f02640270e52e3</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a36499ee4dd9e6821f72b0af03b86b731</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>adbc261eb40b20d3a185e0355049f60a4</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a531914803ab5722a848f51b36a866d23</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a3dee918ed636c26db8c9367f4a504d96</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::IteratorRange</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Arbiter::IteratorRange</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_iterator_range.html</Path>
    <Abstract>Represents a pair of iterators bracketing the start and end of a range. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IteratorRange</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::IteratorRange</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_iterator_range.html</Path>
    <Anchor>a12d25712d6376d28b13ca4368f47e3ec</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_begin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::IteratorRange</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_iterator_range.html</Path>
    <Anchor>adccd6a1189b08ef2babe2ad4f9b71137</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_end</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::IteratorRange</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_iterator_range.html</Path>
    <Anchor>a43dbba1ed47b73473d4136d62df6fb6d</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::MultipassIterator</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Arbiter::MultipassIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_multipass_iterator.html</Path>
    <Abstract>Contains the state necessary to perform an algorithm over an iterator multiple times. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MultipassIterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::MultipassIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_multipass_iterator.html</Path>
    <Anchor>a4d9b059e35c2f01bad9ae651553fc673</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MultipassIterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::MultipassIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_multipass_iterator.html</Path>
    <Anchor>ab7a8c58804ad6d9c5d4a6c8f59d25bd5</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MultipassIterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::MultipassIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_multipass_iterator.html</Path>
    <Anchor>abb8fe44afe4be69298e977e081429c64</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MultipassIterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::MultipassIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_multipass_iterator.html</Path>
    <Anchor>a93ac06b6807ddca1bab8f688ed9776a7</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator bool</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::MultipassIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_multipass_iterator.html</Path>
    <Anchor>afb7abbf3b345d6e267ae3b59ebab263f</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::MultipassIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_multipass_iterator.html</Path>
    <Anchor>aa44ce193e69d4cd91d580313aca8f5b9</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::MultipassIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_multipass_iterator.html</Path>
    <Anchor>af0c817447315a29ea7199a49c0856437</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reset</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::MultipassIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_multipass_iterator.html</Path>
    <Anchor>aefc371ed3541c2fe0f3f28c03ffd7474</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Optional</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Abstract>Represents a value which may or may not exist. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>ac7286ea9106e97c4960a2ab1bf0a30e4</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a7cab27d27a8b07ece2c8ac811ec15ce0</Anchor>
    <Abstract>Creates an empty Optional. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>abb0208a623c70842ef2dfa08267d6054</Anchor>
    <Abstract>Creates an empty Optional. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a31d1defc6884d9d87aa27d2f9887166c</Anchor>
    <Abstract>Creates an Optional containing a copy of the given value. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a12eed362a9115a098e30294d6d7dd19c</Anchor>
    <Abstract>Creates an Optional containing the given value. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>afc3fb10d4fe7d66035da60c55bac8ddd</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>ac3a225ecf6d8fd018878581504ac9d94</Anchor>
    <Abstract>Converts from another Optional containing a compatible type. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>ae2eb3543d5eec037600bbb95569cc96c</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a08266cbe814b6be9503158915e2facb0</Anchor>
    <Abstract>Converts from another Optional containing a compatible type. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a44d6dd8c9529cae4f719b35f4509a7be</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator bool</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>abcd003292c015ccde7218b4a8b2860d5</Anchor>
    <Abstract>Returns true if this Optional contains a value, or false if it is empty. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a71fbb329eb7bf4f224882768c0e2fe1f</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>ad0d7e1a2e103398b72284abc86eaeb84</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>afd33da27d67b8736460e2b64aedea999</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a54ff087410fb993d90790e3876cf3f8d</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a006f8d063762614ced4d57e13a675fa5</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>ab9a1947868059d25520796b4d3954757</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pointer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>aadf0e3fa1cfe29239b909f342700da30</Anchor>
    <Abstract>Returns a pointer to the value in the Optional, or nullptr if empty. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pointer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a6c7bed08143902d064584a90686a12ae</Anchor>
    <Abstract>Returns a pointer to the value in the Optional, or nullptr if empty. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a67b927fa3eaddc25997dff085a0b43d1</Anchor>
    <Abstract>Accesses the value in the Optional. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>ab0f363163225390d70f9edc0b86ca680</Anchor>
    <Abstract>Accesses the value in the Optional. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::PermutationIterator</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Arbiter::PermutationIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_permutation_iterator.html</Path>
    <Abstract>An iterator which generates every possible combination of the values of other iterators. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PermutationIterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::PermutationIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_permutation_iterator.html</Path>
    <Anchor>a4d5265385a22860b1593efd69ca5734d</Anchor>
    <Abstract>Creates an empty iterator. </Abstract>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PermutationIterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::PermutationIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_permutation_iterator.html</Path>
    <Anchor>ae7122e1e586cfd7f1abb5cb8bed815a3</Anchor>
    <Abstract>Creates an iterator which will create all possible combinations between the given ranges...</Abstract>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator bool</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::PermutationIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_permutation_iterator.html</Path>
    <Anchor>a8bdb37f88ea1ed9dc81f05988e21b8e7</Anchor>
    <Abstract>Returns whether the iterator is valid (i.e., dereferenceable). </Abstract>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::PermutationIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_permutation_iterator.html</Path>
    <Anchor>a04cae7b97e6c09d63ffe7da78c07ca1d</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::PermutationIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_permutation_iterator.html</Path>
    <Anchor>af99840af54fc68caae6b1058e1e19b0c</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::PermutationIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_permutation_iterator.html</Path>
    <Anchor>a7cd4ca9995a189a7dc058869ca2c58c5</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::PermutationIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_permutation_iterator.html</Path>
    <Anchor>ade84314f66d4f373ae5ecb97ccde84e5</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::PermutationIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_permutation_iterator.html</Path>
    <Anchor>afa3e56963bfca89f693bc4d0c519d5dc</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::SharedUserValue</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Abstract>Expresses shared ownership of opaque user-provided data, which was originally described in an Arbiter...</Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SharedUserValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a5be9212601a489641488e914aef1f5df</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SharedUserValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>ada413b15e8db1702aeb58f63d9dab7fd</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>ab1848961bb2e8175356faebdde486521</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a4db7260742928ac4898de4fe520105f5</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>description</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a00f6ccc566bbebf60645a35126a4b4ea</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a7c38e5dfc73c8752eb3a518d55df949c</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a66587d89a3eb3b90f2cd53418bb0a5c2</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>accdfdbf00561a461039bc22a646aaaad</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a233b1ddc23b26ed7d607e4fe0d926051</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a68809201ace5637f3e6e76bf221d6275</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a8e50dcc777757f9945050f0c47a97702</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a77ce5e722f734967f098e46d8742bd8a</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Exception</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>Arbiter::Exception</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter_1_1_exception.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Exception::Base</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Exception::Base</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_base.html</Path>
    <Abstract>Base type for Arbiter exceptions. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Base</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Exception::Base</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_base.html</Path>
    <Anchor>a6ddd88907768207d9b8a1540e241eec5</Anchor>
    <DeclaredIn>Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Base</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Exception::Base</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_base.html</Path>
    <Anchor>a2243931aeb7b6d102780345141ff92db</Anchor>
    <DeclaredIn>Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Exception::MutuallyExclusiveConstraints</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Exception::MutuallyExclusiveConstraints</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_mutually_exclusive_constraints.html</Path>
    <Abstract>Exception type indicating that there were mutually exclusive constraints in a proposed dependency gra...</Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MutuallyExclusiveConstraints</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Exception::MutuallyExclusiveConstraints</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_mutually_exclusive_constraints.html</Path>
    <Anchor>ad2d6c4d299a18fa20c3b15a17adb22e2</Anchor>
    <DeclaredIn>Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Exception::UnsatisfiableConstraints</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Exception::UnsatisfiableConstraints</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_unsatisfiable_constraints.html</Path>
    <Abstract>Exception type indicating that there were unsatisfiable constraints for the selected versions in a pr...</Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UnsatisfiableConstraints</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Exception::UnsatisfiableConstraints</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_unsatisfiable_constraints.html</Path>
    <Anchor>a5350881d69f0c4523ca241c75366c819</Anchor>
    <DeclaredIn>Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Exception::UserError</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Exception::UserError</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_user_error.html</Path>
    <Abstract>Exception type representing an error that was returned from Arbiter client code. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UserError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Exception::UserError</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_user_error.html</Path>
    <Anchor>aa6f8bf174919c720eed120e296597317</Anchor>
    <DeclaredIn>Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UserError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Exception::UserError</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_user_error.html</Path>
    <Anchor>a2c2f043158e7bcd1454d212bfb351e11</Anchor>
    <DeclaredIn>Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Requirement</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>Arbiter::Requirement</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter_1_1_requirement.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Requirement::Any</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Abstract>A requirement satisfied by any version. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Anchor>a88d33ff811589099c94663410c2d662e</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cloneRequirement</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a1231089736b96e5dab43d90a08bbfb2d</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Anchor>a48d99887052d9f43255729e13bb86382</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Anchor>ab180a7e82a4e19ca9037214c3d9aa2b5</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>intersect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Anchor>a9ddcd37781e3ec05490e5fe5cc871b51</Anchor>
    <Abstract>Attempts to create a requirement which expresses the intersection of this requirement and the given o...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a531914803ab5722a848f51b36a866d23</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Anchor>ab5c7f4498e17f492c5847f48eedf98e2</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Anchor>a2bfb9b5f16f6d0cea148015daa662fbf</Anchor>
    <Abstract>Returns whether this requirement would be satisfied by using the given version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Requirement::AtLeast</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Abstract>A requirement satisfied only by versions greater than or equal to the specified one. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AtLeast</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>a73c21686e5e593b532b8c61328f71ba1</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>a4277b6fe9f280c157b19233c46ebea99</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cloneRequirement</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a1231089736b96e5dab43d90a08bbfb2d</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>afaca70c755039939a96663c89a9af3f6</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>a38901907e9be6c1a5182c102f320928e</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>intersect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>acfe14edebee6a90191ba05687cfab5ac</Anchor>
    <Abstract>Attempts to create a requirement which expresses the intersection of this requirement and the given o...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a531914803ab5722a848f51b36a866d23</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>ac7f2616a73cdb489d590584158d0d803</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>ae5deff9851d560548803cbc2b7dd1c7c</Anchor>
    <Abstract>Returns whether this requirement would be satisfied by using the given version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_minimumVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>a9bf0d27047931565ad1c4732cb005902</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Requirement::CompatibleWith</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Abstract>A requirement satisfied only by versions which are &quot;compatible with&quot; the specified one...</Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CompatibleWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>a02bfcf4d29d86c926d75179a35e9959b</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>aea861e920ed44c5944d2e8b43cbc7aa5</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cloneRequirement</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a1231089736b96e5dab43d90a08bbfb2d</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>a0451138e83193de099bcbeb08fa8fbd0</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>ad78f28e06645072137e31c6f6ff87a10</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>intersect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>a37dc0eb4e75a2af9d1048d55b51aabc1</Anchor>
    <Abstract>Attempts to create a requirement which expresses the intersection of this requirement and the given o...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a531914803ab5722a848f51b36a866d23</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>ab14d8dd0731c30966efd10f6057991ce</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>ae2f335aa8f68d6ae87d498f643f12cea</Anchor>
    <Abstract>Returns whether this requirement would be satisfied by using the given version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_baseVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>a8a940d45a588bf07f80f75b712eb991c</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_strictness</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>aeebab6823ceef5aaa58b5d5ec5805d94</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Requirement::Exactly</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Abstract>A requirement satisfied only by one exact version. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Exactly</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>a099e9e4b9a8435f61d191f0b2b2a8563</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>acdf7cac9c211d738c9d1fdbfc6629bc0</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cloneRequirement</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a1231089736b96e5dab43d90a08bbfb2d</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>a25ce37c745539db525ba7036f70dc858</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>a12d85bdf24d9e39fe88a93014f3fefdf</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>intersect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>aae1eb8b87778822f875f3682dc019ef3</Anchor>
    <Abstract>Attempts to create a requirement which expresses the intersection of this requirement and the given o...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a531914803ab5722a848f51b36a866d23</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>a241cf2f8b67b8cf01aa057d5235e4b00</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>ae8edbb1d836966b7b5f1264a135c7ad3</Anchor>
    <Abstract>Returns whether this requirement would be satisfied by using the given version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_version</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>aad38e1acf5d44a6941d40c46900ed335</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; Arbiter::Optional&lt; T &gt; &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; Arbiter::Optional&lt; T &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_1_1_optional_3_01_t_01_4_01_4.html</Path>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; Arbiter::Optional&lt; T &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_1_1_optional_3_01_t_01_4_01_4.html</Path>
    <Anchor>a52460037cf96a0590045fc00615ac0b8</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; Arbiter::SharedUserValue&lt; Owner &gt; &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; Arbiter::SharedUserValue&lt; Owner &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_1_1_shared_user_value_3_01_owner_01_4_01_4.html</Path>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; Arbiter::SharedUserValue&lt; Owner &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_1_1_shared_user_value_3_01_owner_01_4_01_4.html</Path>
    <Anchor>a7c49216475b8c7ce30b68c5743627182</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; ArbiterDependency &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; ArbiterDependency &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_dependency_01_4.html</Path>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; ArbiterDependency &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_dependency_01_4.html</Path>
    <Anchor>a008de161b013f3a8c3a3e04dd3fb3ee2</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; ArbiterProjectIdentifier &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; ArbiterProjectIdentifier &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_project_identifier_01_4.html</Path>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; ArbiterProjectIdentifier &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_project_identifier_01_4.html</Path>
    <Anchor>a30677cd5340ce51b4d0547f0d8221c5b</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; ArbiterRequirement &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; ArbiterRequirement &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_requirement_01_4.html</Path>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; ArbiterRequirement &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_requirement_01_4.html</Path>
    <Anchor>a501993e1a96ab9e40ddbec9a98373ae6</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; ArbiterResolvedDependency &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; ArbiterResolvedDependency &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_resolved_dependency_01_4.html</Path>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; ArbiterResolvedDependency &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_resolved_dependency_01_4.html</Path>
    <Anchor>a84a5e582f8b330d9f63c06bd5d797423</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; ArbiterSelectedVersion &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; ArbiterSelectedVersion &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_selected_version_01_4.html</Path>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; ArbiterSelectedVersion &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_selected_version_01_4.html</Path>
    <Anchor>aed3d58d7862a302ca313f84e78205b28</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; ArbiterSemanticVersion &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; ArbiterSemanticVersion &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_semantic_version_01_4.html</Path>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; ArbiterSemanticVersion &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_semantic_version_01_4.html</Path>
    <Anchor>a29e5dada823e852b3aae7808cddd6b8f</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
</Tokens>
