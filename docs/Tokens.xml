<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateDependency</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>ae18220cbeb522a6c0344bf0c11140dfe</Anchor>
    <Abstract>Creates a dependency which specifies a version requirement of the given project. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateDependencyList</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a0118f0f1cccc5b9c7204b46264d334c3</Anchor>
    <Abstract>Creates a dependency list which wraps a C array of ArbiterDependency objects. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateProjectIdentifier</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a7de65d449c28f8303e921783db237e21</Anchor>
    <Abstract>Creates a project identifier from the given opaque data. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependencyProject</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a6fbdf8158145ccdded1dd44eaaf2be36</Anchor>
    <Abstract>Returns the project identified by this dependency. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependencyRequirement</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a267152a90840563ded5a4e8b9b88cad0</Anchor>
    <Abstract>Returns the version requirement of this dependency. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterFreeDependency</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a5f80f7b9dcc9aa5840d29ee2901696a1</Anchor>
    <Abstract>Releases the memory associated with a dependency object. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterFreeDependencyList</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a28d8873e472d8960ac1e91b295a761cc</Anchor>
    <Abstract>Releases the memory associated with a dependency list. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterFreeProjectIdentifier</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a5735a7ffdabaa994813567d5066a6b9f</Anchor>
    <Abstract>Releases the memory associated with a project identifier. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterProjectIdentifierValue</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>ae9a49ddf74167ba7df7f03ce05df116a</Anchor>
    <Abstract>Returns the opaque data which was provided to ArbiterCreateProjectIdentifier(). </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>src_2_dependency_8h.html</Path>
    <Anchor>a506d6bc052044d7a86f4a79d2e61c886</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>src_2_dependency_8h.html</Path>
    <Anchor>af5662e0468189524987864d0ce47dd04</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>src_2_dependency_8h.html</Path>
    <Anchor>af2d0e8a943fb8d0bb8a67e6aa10ae004</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateRequirementAny</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>ab8fa853f54f8f3624acec0ed17695c50</Anchor>
    <Abstract>Creates a requirement which will match any version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateRequirementAtLeast</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>a164b5dbddf86d6d39aac3c21836a2f9a</Anchor>
    <Abstract>Creates a requirement which will match versions not less than the specified version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateRequirementCompatibleWith</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>acbf4c4b6206ff5f59a31a575f09c41e9</Anchor>
    <Abstract>Creates a requirement which will match versions that are &quot;compatible with&quot; the given version...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateRequirementExactly</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>a3fb84244d1362d2b02e30a827166d409</Anchor>
    <Abstract>Creates a requirement which will only match the specified version, including any prerelease version a...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterEqualRequirements</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>a6fba7539e9c02642fcdc79acdc031109</Anchor>
    <Abstract>Checks whether two requirements are equivalent. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterFreeRequirement</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>a53341511ab8c7fba76e7baa5b486df2d</Anchor>
    <Abstract>Releases the memory associated with a requirement object. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterRequirementSatisfiedBy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>ae491ecfe24f281bb34cfa742c6c76fe5</Anchor>
    <Abstract>Determines whether the given requirement is satisfied by the given version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterRequirementStrictnessStrict</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>a11ce26a584153a37e54d73ed50088fe5ae9aebd3157b7010f3b6e438a9f022c27</Anchor>
    <Abstract>Determine compatibility according to a strict interpretation of SemVer. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterRequirementStrictnessAllowVersionZeroPatches</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>a11ce26a584153a37e54d73ed50088fe5ad264b77b9ac0379e76d14b6d56570199</Anchor>
    <Abstract>According to SemVer, technically all 0.y.z releases can break backwards compatibility, meaning that minor and patch versions have to match exactly in order to be &quot;compatible.&quot;. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>src_2_requirement_8h.html</Path>
    <Anchor>aec822e69ff6e37dda6c67c24fc700f90</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateResolver</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_resolver_8h.html</Path>
    <Anchor>ae9d62bf4a862c49649fac81a3db58adb</Anchor>
    <Abstract>Creates a dependency resolver, implemented using the given behaviors, which will attempt to pick comp...</Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterFreeResolver</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_resolver_8h.html</Path>
    <Anchor>a981b62a0d255b1cea4f3e689e0bdcb69</Anchor>
    <Abstract>Releases the memory associated with a dependency resolver. </Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedAllDependencies</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_resolver_8h.html</Path>
    <Anchor>ab19872499232505977544b55ba3e3c4b</Anchor>
    <Abstract>Returns whether all dependencies have finished being resolved to specific versions. </Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolverContext</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_resolver_8h.html</Path>
    <Anchor>a75b6c5e452ea46b04c8c20571dd9498d</Anchor>
    <Abstract>Returns any context data which was provided to ArbiterCreateResolver(). </Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterStartResolvingNextDependency</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_resolver_8h.html</Path>
    <Anchor>a3594810e39f6efb5c6b51e68dbb50358</Anchor>
    <Abstract>Begins resolving the next unresolved dependency. </Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>src_2_value_8h.html</Path>
    <Anchor>a0cbbba06d9a26b9b806a63c8ecb5bf0f</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCompareVersionOrdering</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a9f2f418f3c237dd22cf0fd9c570e9282</Anchor>
    <Abstract>Orders two semantic versions relative to each other. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateSelectedVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a10a48316d9fe53bbb03ca825b6aede54</Anchor>
    <Abstract>Creates a selected version which corresponds to the given semantic version. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateSemanticVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a27dd48159dbc855ca290f55d0e9fc299</Anchor>
    <Abstract>Creates a semantic version with the given components. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateSemanticVersionFromString</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>af4e5aa3f0b2f888377149a5bf67d28e2</Anchor>
    <Abstract>Attempts to parse the given NUL-terminated string into a semantic version, returning NULL if a parse ...</Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterEqualSelectedVersions</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a4739dd668feb854f63d8d99a9ad7a170</Anchor>
    <Abstract>Returns whether the two selected versions are equivalent. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterEqualVersions</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a076544fb41154ba974a54361343bd2fa</Anchor>
    <Abstract>Checks whether two versions are equal in every component, including those which may not participate i...</Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterFreeSelectedVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a901dec118885ae6753bcab8464dd4f48</Anchor>
    <Abstract>Releases the memory associated with a selected version object. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterFreeSemanticVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>adc727be4523308d364f369a0f005d4a8</Anchor>
    <Abstract>Releases the memory associated with a version object. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterGetBuildMetadata</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a21ff3211cabef158b268257106ffd231</Anchor>
    <Abstract>Returns the build metadata string from a semantic version, or NULL if there is not one associated wit...</Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterGetMajorVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a14b23e4030a59c28102289beab2cec4e</Anchor>
    <Abstract>Returns the major version number (X.y.z) from a semantic version. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterGetMinorVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a471e9b05b540d8efc80737d29f11b38b</Anchor>
    <Abstract>Returns the minor version number (x.Y.z) from a semantic version. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterGetPatchVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a1e428cb93990de40fb284bca2a6f6b3c</Anchor>
    <Abstract>Returns the patch version number (x.y.Z) from a semantic version. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterGetPrereleaseVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a0c485c0aa5b651d576acc7a0b6f88e69</Anchor>
    <Abstract>Returns the prerelease version string from a semantic version, or NULL if there is not one associated...</Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSelectedVersionMetadata</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>aa75b8ec3b12a076b5cd748c1c465cc79</Anchor>
    <Abstract>Returns any metadata pointer which was provided to ArbiterCreateSelectedVersion(). </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSelectedVersionSemanticVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a91dafaf64fb02b4f1f0c0e63b37d5a8f</Anchor>
    <Abstract>Returns the semantic version which corresponds to the given selected version. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>src_2_version_8h.html</Path>
    <Anchor>a11d0d2c94442e91dbdc97db20bf361ab</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>src_2_version_8h.html</Path>
    <Anchor>a3ceb0abab8fc985a9f559c17a56eb9e6</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeLeft</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a4b4608a18b32ee835c214af19d13ae71</Anchor>
    <Abstract>Creates a Left value which can be implicitly converted into an Either. </Abstract>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeRight</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>acc5971de887510c036792c967510b391</Anchor>
    <Abstract>Creates a Right value which can be implicitly converted into an Either. </Abstract>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a758080dd6f8b6690fa4d80470935dd58</Anchor>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hashOf</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a7c177714e947121b6413560c539678a0</Anchor>
    <Abstract>Hashes an arbitrary value that has an std::hash specialization. </Abstract>
    <DeclaredIn>Hash.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeOptional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a4b82513a599ffc981e266727d81e816b</Anchor>
    <Abstract>Creates an Optional from a value, inferring its type. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a1d6bb8d6cdbfd55339357539ceb16d80</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a15c4c9cb7a48232e28ad2165fa35d1b3</Anchor>
    <Abstract>Converts an arbitrary value into a string, using operator&lt;&lt;. </Abstract>
    <DeclaredIn>ToString.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>md_CONTRIBUTING</Name>
      <APILanguage>markdown</APILanguage>
    </TokenIdentifier>
    <Path>md_CONTRIBUTING.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>md_LICENSE</Name>
      <APILanguage>markdown</APILanguage>
    </TokenIdentifier>
    <Path>md_LICENSE.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependency</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Abstract>Represents a dependency specification, which consists of a project identifier and a version requireme...</Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependency</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>a18646b35930fe215549d90f40c6b7fb7</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependency</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>a5db242ea37875c7ad5db0658c1380b0b</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>a8f739e52f29c04ef8c2e5ce175862671</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>a8c87e4e2586752a40c2e600c02a2c09f</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>requirement</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>aee1b768080ebb2a3e8de8acee573fcf4</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_projectIdentifier</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>a6d689040e0aad5aa5f77c956de9123e0</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependencyList</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Abstract>Represents a list of dependencies. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependencyList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>af2b9274aa6d6b7a3949274c73100a2af</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_dependencies</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>a97ae63be6483d202ae8c5bbeb5fa56f6</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterProjectIdentifier</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Abstract>An opaque value which identifies a project participating in dependency resolution. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>a4c25c9af6da917d4e111d17115fd59f5</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterProjectIdentifier</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>a8c28e3259150288a9be44d39a998cb79</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>af6441e0c2d5e2b5f12cc0525053ecac0</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>a919c5e9749d14d53aac182a7b6db77ba</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>a86429cc4755c14bc209df117bc0e2a2e</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterRequirement</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Abstract>Represents a requirement for a specific version or set of versions. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~ArbiterRequirement</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a047d4a05356a389f581c635d7e8d9b2e</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>aa0a4382f74c2ac504ab391b473f2b9de</Anchor>
    <Abstract>Creates a copy of this requirement (including its dynamic type). </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>intersect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a154df9eef873c0cdb2c1470f8ac9eb8b</Anchor>
    <Abstract>Attempts to create a requirement which expresses the intersection of this requirement and the given o...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a817a41700a2eb366dee80ec5a462f34f</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a82161e1baaa12ed1206f8ea77e313864</Anchor>
    <Abstract>Returns whether this requirement is equivalent to the given one. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>aec26c2d8f8ace95bcaebde074c93b50f</Anchor>
    <Abstract>Returns whether this requirement would be satisfied by using the given version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a14e6877e7bae9b4e477ab31fbf3dc3bc</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a5d9d40e896f8eccf73a8b33d4839b877</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>ffunc</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>aec822e69ff6e37dda6c67c24fc700f90</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolver</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Abstract>A dependency resolver which contains context about how to evaluate the dependency graph...</Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Context</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>a2a7258fe1962fbf1ed5e4fd923b57a39</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolver</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>a1211dac3e9d2ae7ae6ab8a21f06711fd</Anchor>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fetchAvailableVersions</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>a23bfaa1f446f0cafea439a4e50b3e9e9</Anchor>
    <Abstract>Fetches the list of available versions for the given project. </Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fetchDependencyList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>a0ed1919df58076b4664051e5b59aa1ce</Anchor>
    <Abstract>Fetches the list of dependencies for the given project and version. </Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>resolvedAll</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>abf493de4cdf62052336e403c2aff9453</Anchor>
    <Abstract>Returns whether all dependencies have been resolved. </Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>resolveNext</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>af17c60b36fd4bedbe0e25dfc026ca1d5</Anchor>
    <Abstract>Begins resolving the next unresolved dependency. </Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_context</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>a913aeaac961482fc0184e1be380a5d10</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolverBehaviors</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterResolverBehaviors</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver_behaviors.html</Path>
    <Abstract>User-provided behaviors for how dependency resolution should work. </Abstract>
    <DeclaredIn>arbiter/Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fetchAvailableVersions</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterResolverBehaviors</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver_behaviors.html</Path>
    <Anchor>a449bf26e592a81e95c939e9b7779a89d</Anchor>
    <Abstract>A thread-safe, re-entrant function which fetches a project&amp;#39;s available versions according to the give...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fetchDependencyList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterResolverBehaviors</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver_behaviors.html</Path>
    <Anchor>a940b96e662442830714761b1eed8dc89</Anchor>
    <Abstract>A thread-safe, re-entrant function which fetches a project version&amp;#39;s dependencies according to the gi...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolverCallbacks</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterResolverCallbacks</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver_callbacks.html</Path>
    <Abstract>User-provided callbacks to invoke when dependency resolution has progressed. </Abstract>
    <DeclaredIn>arbiter/Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>onError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterResolverCallbacks</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver_callbacks.html</Path>
    <Anchor>aa29efe77c90fb9990b017eb3636db87a</Anchor>
    <Abstract>A thread-safe function which will be invoked when an error has occurred trying to resolve the next de...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>onSuccess</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterResolverCallbacks</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver_callbacks.html</Path>
    <Anchor>a909305cbe2fd0b68b5c056e3c3b472ab</Anchor>
    <Abstract>A thread-safe function which will be invoked when the specified version of project has been picked as...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSelectedVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Abstract>Represents a &quot;selected&quot; version, which is a concrete choice of a real project version. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Metadata</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>a883198df77e7d43882095daa57e2fb02</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSelectedVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>aa0419ae1103f4277236ab6e8ef1d85c7</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>ad7166bafd063c07cf2eb2e2929651a03</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>aac7c8b36f437e2f21ffbf14aee84fa20</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>ad6efe700233437c71bfd4ac5efe8200e</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>ae1013b083003d44934e867c095f0fb61</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>ac411474bc6ac13cfdfcb8729c679afdf</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>a67b664cc3f9a0c6b5874a38bcb8f9f08</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_metadata</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>a3c2870d90dc94174d4be6addc33862ae</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_semanticVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>a7440b93a72fd6d0646c3df0709936ea8</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSemanticVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Abstract>Represents a semantic version, as defined by semver.org. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSemanticVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a0b46dd969de2b8b678d75bb6e355634a</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>aec2e8ff2e29c040df88d7659568da41f</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a66a46414be289f85e85a57d7e2a57b5e</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a4658a1d84aaacc9c528405a609f2f441</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>af65327f600a0351a5fcdfc158a154377</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>ad74a0b5391bd77aa4a5c32a8ad8dc7b8</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a9ccfd9dcb2b667e58cc9fac55932acf9</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a202eeeb164ea227fc869d17ef3b7d90e</Anchor>
    <Abstract>Attempts to parse a well-formed semantic version from a string. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_buildMetadata</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a704f664242e1e765f692419ea1e21810</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_major</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>aa40218723a2c55f5b25a3853d8175fdf</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_minor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>aa06ae0e067e7b4ea5291e82e65c5f5fe</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_patch</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a6f635c501dbec7602e1b092f0e3e724f</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_prereleaseVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a4c9e7a3d6669b55029f98cef482f7726</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterUserValue</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterUserValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_value.html</Path>
    <Abstract>Represents an arbitrary value that can be associated with Arbiter data types and functionality. </Abstract>
    <DeclaredIn>arbiter/Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createDescription</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterUserValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_value.html</Path>
    <Anchor>a24b7de90b02aa6e93e6ff39669022cb0</Anchor>
    <Abstract>An operation to convert this data object to a string. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterUserValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_value.html</Path>
    <Anchor>a21ad42b0d600af18edb221b0cc7a2870</Anchor>
    <Abstract>The underlying data object. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>destructor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterUserValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_value.html</Path>
    <Anchor>a46326f865baa51148191f64d69846e5f</Anchor>
    <Abstract>A cleanup function to call when the ArbiterUserValue is done being used. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>equals</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterUserValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_value.html</Path>
    <Anchor>a6a6d3cc53439b5bac7c5ea362b033886</Anchor>
    <Abstract>An equality operation over two data objects. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hashOf</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a7c177714e947121b6413560c539678a0</Anchor>
    <Abstract>Hashes an arbitrary value that has an std::hash specialization. </Abstract>
    <DeclaredIn>Hash.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeLeft</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a4b4608a18b32ee835c214af19d13ae71</Anchor>
    <Abstract>Creates a Left value which can be implicitly converted into an Either. </Abstract>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeOptional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a4b82513a599ffc981e266727d81e816b</Anchor>
    <Abstract>Creates an Optional from a value, inferring its type. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeRight</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>acc5971de887510c036792c967510b391</Anchor>
    <Abstract>Creates a Right value which can be implicitly converted into an Either. </Abstract>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a1d6bb8d6cdbfd55339357539ceb16d80</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a758080dd6f8b6690fa4d80470935dd58</Anchor>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a15c4c9cb7a48232e28ad2165fa35d1b3</Anchor>
    <Abstract>Converts an arbitrary value into a string, using operator&lt;&lt;. </Abstract>
    <DeclaredIn>ToString.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Either</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Arbiter::Either</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_either.html</Path>
    <Abstract>Represents one of two values. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Either</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Either</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_either.html</Path>
    <Anchor>a4bd3fd53353986dce643e2a31713b618</Anchor>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Either</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Either</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_either.html</Path>
    <Anchor>a4ba254ec4418ac43a3b4ac418ac1797b</Anchor>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Either</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Either</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_either.html</Path>
    <Anchor>afe18ddfd06dcab2b11ef30d9ff813220</Anchor>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Either</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Either</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_either.html</Path>
    <Anchor>aaa3523a7b0c65828381747fa26dce1d0</Anchor>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Either</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Either</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_either.html</Path>
    <Anchor>ae1a884a6513d4b8fb667d24fe8c27676</Anchor>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Either</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Either</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_either.html</Path>
    <Anchor>a70249cb37d82d9f23c3fcd356536cb39</Anchor>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Either</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Either</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_either.html</Path>
    <Anchor>ac52e9e09b46d92f9d673fba995d4c8f9</Anchor>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~Either</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Either</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_either.html</Path>
    <Anchor>adc7f747c9812cb5c15370f9c4296ac0e</Anchor>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasLeft</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Either</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_either.html</Path>
    <Anchor>abd4f9af917819c76ba4aba3faaa24899</Anchor>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasRight</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Either</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_either.html</Path>
    <Anchor>afc203f8ddc4a3353ab1db3d3155ff236</Anchor>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>left</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Either</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_either.html</Path>
    <Anchor>a51886e36abf77d50d6add81bfca75b95</Anchor>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>left</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Either</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_either.html</Path>
    <Anchor>a2731efd12041655339c3528205ea1697</Anchor>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Either</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_either.html</Path>
    <Anchor>a33966c7b74794634886d5cca5482dc13</Anchor>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Either</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_either.html</Path>
    <Anchor>a9915c5b23c0d8e6064d06db435a5a5f8</Anchor>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>right</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Either</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_either.html</Path>
    <Anchor>ac2fcaaa9d82c3d7e33c4c5cb171fe1ee</Anchor>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>right</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Either</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_either.html</Path>
    <Anchor>aab64002992172d9feabe8306002afe7b</Anchor>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>rightOrThrowLeft</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Either</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_either.html</Path>
    <Anchor>af9f5a1708efd35b1a9a26e1fe793563b</Anchor>
    <Abstract>Returns the Right value, if hasRight() is true, or else throws an exception using the Left value...</Abstract>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>rightOrThrowLeft</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Either</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_either.html</Path>
    <Anchor>a45fbdc9e23581feba38e4bf03249e62b</Anchor>
    <Abstract>Returns the Right value, if hasRight() is true, or else throws an exception using the Left value...</Abstract>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Future</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Arbiter::Future</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_future.html</Path>
    <Abstract>Future type resembling std::shared_future, with support for asynchronous callbacks and composition...</Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Future.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Result</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>Arbiter::Future</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_future.html</Path>
    <Anchor>a9a4364ec96d2aa90e74e3427efd872c0</Anchor>
    <Abstract>The type of result that will be provided by this future. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Future</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Future</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_future.html</Path>
    <Anchor>abbc7304b9f86c8f86bcaf0db3cc94c49</Anchor>
    <DeclaredIn>Future.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Future</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Future</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_future.html</Path>
    <Anchor>a796b3f45dfd84c1e8931bf381a12ae46</Anchor>
    <DeclaredIn>Future.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Future</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Future</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_future.html</Path>
    <Anchor>ae3b0ee1dddb5d640f10140b16c8f483b</Anchor>
    <DeclaredIn>Future.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add_callback</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Future</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_future.html</Path>
    <Anchor>a29ddff2e408cb87aae98ef87f5e568a8</Anchor>
    <Abstract>Adds a callback which will be invoked with the Result once the future has been satisfied. </Abstract>
    <DeclaredIn>Future.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Future</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_future.html</Path>
    <Anchor>a2d4f433d9a4249b9d7c53d84887a0a7d</Anchor>
    <DeclaredIn>Future.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Future</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_future.html</Path>
    <Anchor>ad3eabaf91676bfaccf8a836e22331163</Anchor>
    <DeclaredIn>Future.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Future</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_future.html</Path>
    <Anchor>af10e4c2c015b056cd95ea365dc71b476</Anchor>
    <DeclaredIn>Future.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Future</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_future.html</Path>
    <Anchor>a1bd86b1fd99151405922b8ab0afd8ec4</Anchor>
    <DeclaredIn>Future.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>valid</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Future</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_future.html</Path>
    <Anchor>aa2130486db9e21ee24e5a7a2d393f247</Anchor>
    <DeclaredIn>Future.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>wait</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Future</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_future.html</Path>
    <Anchor>a54cf0346b5bf88b6862d17240fa6fe8f</Anchor>
    <DeclaredIn>Future.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Generator</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Arbiter::Generator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_generator.html</Path>
    <Abstract>A generator function which will (possibly asynchronously) yield values of T until exhausted or an err...</Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Generator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EventFuture</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>Arbiter::Generator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_generator.html</Path>
    <Anchor>ac592315074bc7d56d2ca915486e60c4f</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Function</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>Arbiter::Generator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_generator.html</Path>
    <Anchor>a4e0986827558f87ab89116436d4debbc</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Generator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Generator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_generator.html</Path>
    <Anchor>aed47ea38bd47874fff488c19a5d92f0c</Anchor>
    <Abstract>Instantiates an exhausted generator. </Abstract>
    <DeclaredIn>Generator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Generator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Generator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_generator.html</Path>
    <Anchor>a5b7609470053d577aef89b9c3bb51046</Anchor>
    <Abstract>Instantiates a generator with the given callable object. </Abstract>
    <DeclaredIn>Generator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Generator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Generator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_generator.html</Path>
    <Anchor>a55ad808ccbf3d45264c7a4ff30b45c83</Anchor>
    <DeclaredIn>Generator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Generator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Generator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_generator.html</Path>
    <Anchor>ad6dc80ef63b15197b7a446267ac93f52</Anchor>
    <DeclaredIn>Generator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>empty</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Generator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_generator.html</Path>
    <Anchor>af97a383aa382816a47159cbe18852f5d</Anchor>
    <Abstract>Returns whether the generator is empty (exhausted). </Abstract>
    <DeclaredIn>Generator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>next</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Generator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_generator.html</Path>
    <Anchor>a0511ecf5bae46ab8e7e505353a56084c</Anchor>
    <Abstract>Begins generating the next value. </Abstract>
    <DeclaredIn>Generator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Generator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_generator.html</Path>
    <Anchor>afa6820bc70926ebfa3fe15e96513dfb0</Anchor>
    <DeclaredIn>Generator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Generator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_generator.html</Path>
    <Anchor>a70c1628b6bee4f2fa87807f2f8818e57</Anchor>
    <DeclaredIn>Generator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Left</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Arbiter::Left</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_left.html</Path>
    <Abstract>Temporarily holds the left side of an Either, with an unbound Right type. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Left</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Left</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_left.html</Path>
    <Anchor>add3d0c938c20794ede12490686009c7f</Anchor>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Left</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Left</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_left.html</Path>
    <Anchor>a0c76b03adf5101f06bc085b580e96041</Anchor>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Left</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Left</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_left.html</Path>
    <Anchor>aa8e4ea6d6709cfe503d0265bb174813b</Anchor>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::Left</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_left.html</Path>
    <Anchor>ad831aa094b0251ca1d8b8a9542532eaa</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Optional</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Abstract>Represents a value which may or may not exist. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a7cab27d27a8b07ece2c8ac811ec15ce0</Anchor>
    <Abstract>Creates an empty Optional. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>abb0208a623c70842ef2dfa08267d6054</Anchor>
    <Abstract>Creates an empty Optional. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a31d1defc6884d9d87aa27d2f9887166c</Anchor>
    <Abstract>Creates an Optional containing a copy of the given value. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a12eed362a9115a098e30294d6d7dd19c</Anchor>
    <Abstract>Creates an Optional containing the given value. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>afc3fb10d4fe7d66035da60c55bac8ddd</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>ac3a225ecf6d8fd018878581504ac9d94</Anchor>
    <Abstract>Converts from another Optional containing a compatible type. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>ae2eb3543d5eec037600bbb95569cc96c</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a08266cbe814b6be9503158915e2facb0</Anchor>
    <Abstract>Converts from another Optional containing a compatible type. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a44d6dd8c9529cae4f719b35f4509a7be</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator bool</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>abcd003292c015ccde7218b4a8b2860d5</Anchor>
    <Abstract>Returns true if this Optional contains a value, or false if it is empty. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a71fbb329eb7bf4f224882768c0e2fe1f</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>ad0d7e1a2e103398b72284abc86eaeb84</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>afd33da27d67b8736460e2b64aedea999</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a54ff087410fb993d90790e3876cf3f8d</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a006f8d063762614ced4d57e13a675fa5</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>ab9a1947868059d25520796b4d3954757</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pointer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>aadf0e3fa1cfe29239b909f342700da30</Anchor>
    <Abstract>Returns a pointer to the value in the Optional, or nullptr if empty. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pointer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a6c7bed08143902d064584a90686a12ae</Anchor>
    <Abstract>Returns a pointer to the value in the Optional, or nullptr if empty. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a67b927fa3eaddc25997dff085a0b43d1</Anchor>
    <Abstract>Accesses the value in the Optional. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>ab0f363163225390d70f9edc0b86ca680</Anchor>
    <Abstract>Accesses the value in the Optional. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Promise</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Arbiter::Promise</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_promise.html</Path>
    <Abstract>Promise type resembling std::promise, which yields Arbiter::Future instead of std::future or std::sha...</Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Future.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Result</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>Arbiter::Promise</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_promise.html</Path>
    <Anchor>ab9e6ed56302079afdb9e3c06ef93e417</Anchor>
    <Abstract>The type of result which will be provided by any future obtained from this promise. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Promise</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Promise</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_promise.html</Path>
    <Anchor>a86b94596ae7db0eae64e1e4de07ef992</Anchor>
    <DeclaredIn>Future.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Promise</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Promise</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_promise.html</Path>
    <Anchor>a6545d22333274f51776279552a353c9b</Anchor>
    <DeclaredIn>Future.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Promise</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Promise</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_promise.html</Path>
    <Anchor>a4a70a43428510f570df4f54066a5f5a2</Anchor>
    <DeclaredIn>Future.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~Promise</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Promise</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_promise.html</Path>
    <Anchor>a1e7398c25153c3a0e587cbe576e03e97</Anchor>
    <DeclaredIn>Future.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get_future</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Promise</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_promise.html</Path>
    <Anchor>ab925e00ff33e94ecfe8588f9a3ffa70e</Anchor>
    <DeclaredIn>Future.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Promise</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_promise.html</Path>
    <Anchor>a23221cfe86512ebdc904281e367dad69</Anchor>
    <DeclaredIn>Future.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Promise</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_promise.html</Path>
    <Anchor>a2d3e8381522f6256dfd8b46d0332ae48</Anchor>
    <DeclaredIn>Future.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set_exception</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Promise</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_promise.html</Path>
    <Anchor>a15dc783950df12a4274be45a2a214e8b</Anchor>
    <DeclaredIn>Future.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set_result</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Promise</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_promise.html</Path>
    <Anchor>aa52fc2de4a33624cc33c4d0cfd6fba13</Anchor>
    <DeclaredIn>Future.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set_value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Promise</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_promise.html</Path>
    <Anchor>a24f579e87cce5e66141d1589a3467e6e</Anchor>
    <DeclaredIn>Future.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Right</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Arbiter::Right</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_right.html</Path>
    <Abstract>Temporarily holds the right side of an Either, with an unbound Left type. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Right</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Right</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_right.html</Path>
    <Anchor>ac09950a6584a953ec5b97de68a33c563</Anchor>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Right</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Right</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_right.html</Path>
    <Anchor>a294dd1fe3bc35aad0e68165ab4f13352</Anchor>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Right</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Right</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_right.html</Path>
    <Anchor>af9b98ac154f3e8b2f243c633e8e08d36</Anchor>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::Right</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_right.html</Path>
    <Anchor>ab427e7c59f7cc62868b63043f39e5e3c</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::SharedUserValue</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Abstract>Expresses shared ownership of opaque user-provided data, which was originally described in an Arbiter...</Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SharedUserValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>ada413b15e8db1702aeb58f63d9dab7fd</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>ab1848961bb2e8175356faebdde486521</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a4db7260742928ac4898de4fe520105f5</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>description</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a00f6ccc566bbebf60645a35126a4b4ea</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a68809201ace5637f3e6e76bf221d6275</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Sink</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Arbiter::Sink</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_sink.html</Path>
    <Abstract>Implements an optional &quot;write&quot; end to a Generator, similar to how a Promise is the write end of a Fut...</Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Generator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Event</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>Arbiter::Sink</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_sink.html</Path>
    <Anchor>a7b160b395cf85446d807e2e9956f7cc0</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Sink</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Sink</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_sink.html</Path>
    <Anchor>a7d4fd31e808b167307099ce865f35635</Anchor>
    <DeclaredIn>Generator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Sink</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Sink</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_sink.html</Path>
    <Anchor>aa7e6468c7448ad21a98a0b3b2865a9f7</Anchor>
    <DeclaredIn>Generator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Sink</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Sink</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_sink.html</Path>
    <Anchor>a71d8d45eb1b03ce41b43cd579e856700</Anchor>
    <DeclaredIn>Generator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getGenerator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Sink</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_sink.html</Path>
    <Anchor>a99d4fe044ba0a76325486261834eb3f5</Anchor>
    <Abstract>Creates a generator for accessing the events which are or will be enqueued upon this sink...</Abstract>
    <DeclaredIn>Generator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>onCompleted</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Sink</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_sink.html</Path>
    <Anchor>a1cfe31d3c29ee22d24b67144d39d15fb</Anchor>
    <Abstract>Enqueues a completion event for the Generator. </Abstract>
    <DeclaredIn>Generator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>onError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Sink</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_sink.html</Path>
    <Anchor>a10d6faaecdbe168ab4f51b1fb02e115b</Anchor>
    <Abstract>Enqueues an error for the Generator. </Abstract>
    <DeclaredIn>Generator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>onEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Sink</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_sink.html</Path>
    <Anchor>a55f746c4d43e44b21fd0e9e42754fd3e</Anchor>
    <Abstract>Enqueues an event for the Generator. </Abstract>
    <DeclaredIn>Generator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>onNext</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Sink</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_sink.html</Path>
    <Anchor>aebee08f96cfd85b26a9f05cba0f4c1f5</Anchor>
    <Abstract>Enqueues a value for the Generator. </Abstract>
    <DeclaredIn>Generator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Sink</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_sink.html</Path>
    <Anchor>aeed0655a7714f8618886c3fa5289f1bd</Anchor>
    <DeclaredIn>Generator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Sink</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_sink.html</Path>
    <Anchor>a52324fa5fd0767defb594f37791e28b1</Anchor>
    <DeclaredIn>Generator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Requirement</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>Arbiter::Requirement</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter_1_1_requirement.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Requirement::Any</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Abstract>A requirement satisfied by any version. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Anchor>af7f20fa6276c2c62a23c851aa5770816</Anchor>
    <Abstract>Creates a copy of this requirement (including its dynamic type). </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>intersect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Anchor>a9ddcd37781e3ec05490e5fe5cc871b51</Anchor>
    <Abstract>Attempts to create a requirement which expresses the intersection of this requirement and the given o...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a817a41700a2eb366dee80ec5a462f34f</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Anchor>a3b16f09fcc1098a15db3360d0bb29ed5</Anchor>
    <Abstract>Returns whether this requirement is equivalent to the given one. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Anchor>a2bfb9b5f16f6d0cea148015daa662fbf</Anchor>
    <Abstract>Returns whether this requirement would be satisfied by using the given version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Anchor>a48d99887052d9f43255729e13bb86382</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Anchor>ab180a7e82a4e19ca9037214c3d9aa2b5</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Requirement::AtLeast</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Abstract>A requirement satisfied only by versions greater than or equal to the specified one. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AtLeast</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>a73c21686e5e593b532b8c61328f71ba1</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>ab4e8255cd4ed8eb3f908e5fc0f285cf7</Anchor>
    <Abstract>Creates a copy of this requirement (including its dynamic type). </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>intersect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>acfe14edebee6a90191ba05687cfab5ac</Anchor>
    <Abstract>Attempts to create a requirement which expresses the intersection of this requirement and the given o...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a817a41700a2eb366dee80ec5a462f34f</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>a09d8f1afd4d7308a604c52b3e14c8c14</Anchor>
    <Abstract>Returns whether this requirement is equivalent to the given one. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>ae5deff9851d560548803cbc2b7dd1c7c</Anchor>
    <Abstract>Returns whether this requirement would be satisfied by using the given version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_minimumVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>a9bf0d27047931565ad1c4732cb005902</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>afaca70c755039939a96663c89a9af3f6</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>a38901907e9be6c1a5182c102f320928e</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Requirement::CompatibleWith</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Abstract>A requirement satisfied only by versions which are &quot;compatible with&quot; the specified one...</Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CompatibleWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>a02bfcf4d29d86c926d75179a35e9959b</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>a77a3bb1d31d0a64524c941a5c8c864ef</Anchor>
    <Abstract>Creates a copy of this requirement (including its dynamic type). </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>intersect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>a37dc0eb4e75a2af9d1048d55b51aabc1</Anchor>
    <Abstract>Attempts to create a requirement which expresses the intersection of this requirement and the given o...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a817a41700a2eb366dee80ec5a462f34f</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>a7ddbcfbb67b3c3c4e041b7a96d6420ea</Anchor>
    <Abstract>Returns whether this requirement is equivalent to the given one. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>ae2f335aa8f68d6ae87d498f643f12cea</Anchor>
    <Abstract>Returns whether this requirement would be satisfied by using the given version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_baseVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>a8a940d45a588bf07f80f75b712eb991c</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_strictness</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>aeebab6823ceef5aaa58b5d5ec5805d94</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>a0451138e83193de099bcbeb08fa8fbd0</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>ad78f28e06645072137e31c6f6ff87a10</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Requirement::Exactly</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Abstract>A requirement satisfied only by one exact version. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Exactly</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>a099e9e4b9a8435f61d191f0b2b2a8563</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>ac684a1bf851d2d5588e1c7c4eefa1a54</Anchor>
    <Abstract>Creates a copy of this requirement (including its dynamic type). </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>intersect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>aae1eb8b87778822f875f3682dc019ef3</Anchor>
    <Abstract>Attempts to create a requirement which expresses the intersection of this requirement and the given o...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a817a41700a2eb366dee80ec5a462f34f</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>ad6e08e7cd1b68c41221d0d3e7c99104b</Anchor>
    <Abstract>Returns whether this requirement is equivalent to the given one. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>ae8edbb1d836966b7b5f1264a135c7ad3</Anchor>
    <Abstract>Returns whether this requirement would be satisfied by using the given version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_version</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>aad38e1acf5d44a6941d40c46900ed335</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>a25ce37c745539db525ba7036f70dc858</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>a12d85bdf24d9e39fe88a93014f3fefdf</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Resolver</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>Arbiter::Resolver</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter_1_1_resolver.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Resolver::ResolvedDependency</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Resolver::ResolvedDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_resolver_1_1_resolved_dependency.html</Path>
    <Abstract>Represents a selected version of a dependency. </Abstract>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Resolver::ResolvedDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_resolver_1_1_resolved_dependency.html</Path>
    <Anchor>aa057cc1ecc43d61ab9a96e6a64a9a9b0</Anchor>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>takeOwnership</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Resolver::ResolvedDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_resolver_1_1_resolved_dependency.html</Path>
    <Anchor>ac74b2dbfddd0fece59441bb338519372</Anchor>
    <Abstract>Given a fetch request from the C API, creates a ResolvedDependency corresponding to the dependency wh...</Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>projectIdentifier</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::Resolver::ResolvedDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_resolver_1_1_resolved_dependency.html</Path>
    <Anchor>a3a32b9cd5c0568ef0a26d23c1bc73126</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>selectedVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::Resolver::ResolvedDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_resolver_1_1_resolved_dependency.html</Path>
    <Anchor>acf95a9cbbe2d42350dbee384cfef1184</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; Arbiter::Either&lt; Left, Right &gt; &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; Arbiter::Either&lt; Left, Right &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_1_1_either_3_01_left_00_01_right_01_4_01_4.html</Path>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; Arbiter::Either&lt; Left, Right &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_1_1_either_3_01_left_00_01_right_01_4_01_4.html</Path>
    <Anchor>a7ecf436ba01b8022e3c9d4a38c72cfb1</Anchor>
    <DeclaredIn>Either.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; Arbiter::Optional&lt; T &gt; &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; Arbiter::Optional&lt; T &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_1_1_optional_3_01_t_01_4_01_4.html</Path>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; Arbiter::Optional&lt; T &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_1_1_optional_3_01_t_01_4_01_4.html</Path>
    <Anchor>a52460037cf96a0590045fc00615ac0b8</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; Arbiter::Resolver::ResolvedDependency &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; Arbiter::Resolver::ResolvedDependency &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_1_1_resolver_1_1_resolved_dependency_01_4.html</Path>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; Arbiter::Resolver::ResolvedDependency &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_1_1_resolver_1_1_resolved_dependency_01_4.html</Path>
    <Anchor>a83782655aa3fcd67b247d50e6e6f97e2</Anchor>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; ArbiterDependency &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; ArbiterDependency &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_dependency_01_4.html</Path>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; ArbiterDependency &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_dependency_01_4.html</Path>
    <Anchor>a008de161b013f3a8c3a3e04dd3fb3ee2</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; ArbiterProjectIdentifier &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; ArbiterProjectIdentifier &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_project_identifier_01_4.html</Path>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; ArbiterProjectIdentifier &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_project_identifier_01_4.html</Path>
    <Anchor>a156c9bda8b50f2513d1ac43342346e35</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; ArbiterRequirement &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; ArbiterRequirement &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_requirement_01_4.html</Path>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; ArbiterRequirement &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_requirement_01_4.html</Path>
    <Anchor>a501993e1a96ab9e40ddbec9a98373ae6</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; ArbiterSelectedVersion &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; ArbiterSelectedVersion &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_selected_version_01_4.html</Path>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; ArbiterSelectedVersion &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_selected_version_01_4.html</Path>
    <Anchor>aed3d58d7862a302ca313f84e78205b28</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; ArbiterSemanticVersion &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; ArbiterSemanticVersion &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_semantic_version_01_4.html</Path>
    <DeclaredIn>/Users/justin/GitHub/Arbiter/src/Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; ArbiterSemanticVersion &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_semantic_version_01_4.html</Path>
    <Anchor>a29e5dada823e852b3aae7808cddd6b8f</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
</Tokens>
