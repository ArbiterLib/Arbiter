<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateDependency</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a3bf17516554bec956745a5fc50b04ea8</Anchor>
    <Abstract>Creates a dependency which specifies a version requirement of the given project. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateDependencyList</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a9ca351cdd64f264aaebecc3f26288238</Anchor>
    <Abstract>Creates a dependency list which wraps a C array of ArbiterDependency objects. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateProjectIdentifier</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a7de65d449c28f8303e921783db237e21</Anchor>
    <Abstract>Creates a project identifier from the given opaque data. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateResolvedDependency</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a2f90aa87b11cf22b3c32c2856d4128ad</Anchor>
    <Abstract>Creates a fully resolved dependency referring to the specified version of the given project...</Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependencyProject</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a6fbdf8158145ccdded1dd44eaaf2be36</Anchor>
    <Abstract>Returns the project identified by this dependency. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependencyRequirement</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a46b7999c6765fd1cd9d1489538d2947d</Anchor>
    <Abstract>Returns the version requirement of this dependency. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterProjectIdentifierValue</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>ae9a49ddf74167ba7df7f03ce05df116a</Anchor>
    <Abstract>Returns the opaque data which was provided to ArbiterCreateProjectIdentifier(). </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyProject</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a211126c78b8362b634453487c433dda7</Anchor>
    <Abstract>Returns the project this resolved dependency refers to. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_dependency_8h.html</Path>
    <Anchor>a633409a35c08cb6fed6db83eed6bf50d</Anchor>
    <Abstract>Returns the version which was selected for this resolved dependency. </Abstract>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyGraphAddEdge</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_graph_8h.html</Path>
    <Anchor>aa579e0eb0a4a841e1375827127e22243</Anchor>
    <Abstract>Attempts to add an edge (dependency relationship) into the dependency graph, from dependent to depend...</Abstract>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyGraphAddRoot</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_graph_8h.html</Path>
    <Anchor>a83e961368c6598e4cfc8280a2ead2689</Anchor>
    <Abstract>Attempts to add a root node into the dependency graph, without making it inconsistent. </Abstract>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyGraphCopyAll</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_graph_8h.html</Path>
    <Anchor>aa67b0f0fd90c079e4cfb8e875bb7beaa</Anchor>
    <Abstract>Copies all of the resolved dependencies in the given graph into the C array buffer, which must have enough space to contain ArbiterResolvedDependencyGraphCount() elements. </Abstract>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyGraphCount</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_graph_8h.html</Path>
    <Anchor>a4b570096c9694f0d6637b1dd84c0c0a5</Anchor>
    <Abstract>Returns the number of unique nodes in the given graph, for use with ArbiterResolvedDependencyGraphGet...</Abstract>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyGraphCountDependencies</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_graph_8h.html</Path>
    <Anchor>a2e9cbf5e95e945354bfb5ae4eaf29719</Anchor>
    <Abstract>Returns the number of dependencies that the given project has in the graph, or 0 if the project does ...</Abstract>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyGraphCreate</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_graph_8h.html</Path>
    <Anchor>a3e58322446603806666f8c118ea8973f</Anchor>
    <Abstract>Creates an empty resolved dependency graph. </Abstract>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyGraphGetAllDependencies</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_graph_8h.html</Path>
    <Anchor>a996f14a8de9d1a424c42ad3f15d62938</Anchor>
    <Abstract>Copies pointers to the projects representing the given project&amp;#39;s dependencies into the C array buffer...</Abstract>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyGraphProjectRequirement</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_graph_8h.html</Path>
    <Anchor>ae6d202fc098ad5ede55f89f9b0a8a812</Anchor>
    <Abstract>Returns the requirement which is attached to the given project in the dependency graph, or NULL if the project is not part of the graph. </Abstract>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyGraphProjectVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_graph_8h.html</Path>
    <Anchor>ac169ced36a2e18c27b0e866ef8fb9639</Anchor>
    <Abstract>Returns the version which was selected for the given project in the dependency graph, or NULL if the project is not part of the graph. </Abstract>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyInstallerCountInPhase</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_graph_8h.html</Path>
    <Anchor>a173013d7ca5841428e4806d8518b430d</Anchor>
    <Abstract>Returns the number of resolved dependencies that exist within the given zero-based installer phase...</Abstract>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyInstallerCreate</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_graph_8h.html</Path>
    <Anchor>a5f5598e1d453e374a087ca8c4d3bd99f</Anchor>
    <Abstract>Creates an installer for the given resolved dependency graph. </Abstract>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyInstallerGetAllInPhase</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_graph_8h.html</Path>
    <Anchor>a5e6b9c54dee9562b9049f5131dc4c7ee</Anchor>
    <Abstract>Copies pointers to the resolved dependencies which exist at the given zero-based installer phase into...</Abstract>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyInstallerPhaseCount</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_graph_8h.html</Path>
    <Anchor>a481158be0c7fff62318b51f18bc76b96</Anchor>
    <Abstract>Returns the number of phases that the installer has, for use with ArbiterResolvedDependencyInstallerC...</Abstract>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterRequirementPredicate</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>afa81b24c28ce073667df8c844b700cd6</Anchor>
    <Abstract>A predicate used to determine whether the given version suitably satisfies the requirement. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateRequirementAny</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>ab8fa853f54f8f3624acec0ed17695c50</Anchor>
    <Abstract>Creates a requirement which will match any version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateRequirementAtLeast</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>acae406bd4df23195003c8c9ca652aa2b</Anchor>
    <Abstract>Creates a requirement which will match versions not less than the specified version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateRequirementCompatibleWith</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>a196744216b770334427efb73b264616f</Anchor>
    <Abstract>Creates a requirement which will match versions that are &quot;compatible with&quot; the given version...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateRequirementCompound</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>a1f5970c738eb2253fb1e6a9af2831719</Anchor>
    <Abstract>Creates a compound requirement that evaluates each of a list of requirements. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateRequirementCustom</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>ad19728efe46a55090e1e8733b84b7db2</Anchor>
    <Abstract>Creates a requirement which will evaluate a custom predicate whenever a specific version is checked a...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateRequirementExactly</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>a567222f500e84283df815ec0ba4f1cfb</Anchor>
    <Abstract>Creates a requirement which will only match the specified version, including any prerelease version a...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateRequirementPrioritized</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>a2dd5cbbede07374a4e541fadc60a82b7</Anchor>
    <Abstract>Creates a requirement with a custom priority, changing how the base requirement intersects with other...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateRequirementUnversioned</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>a79781075c540da8d1582b29041e23f93</Anchor>
    <Abstract>Creates a requirement which only matches against ArbiterSelectedVersions that have metadata equal to ...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterRequirementPriority</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>aaf2c94bb2448113a18802f50b2e0e1fa</Anchor>
    <Abstract>Returns the priority of the given requirement. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterRequirementSatisfiedBy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>ae6a0b05f1993df00f77bbe5f6b19b1f1</Anchor>
    <Abstract>Determines whether the given requirement is satisfied by the given version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterRequirementStrictnessStrict</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>a11ce26a584153a37e54d73ed50088fe5ae9aebd3157b7010f3b6e438a9f022c27</Anchor>
    <Abstract>Determine compatibility according to a strict interpretation of SemVer. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterRequirementStrictnessAllowVersionZeroPatches</Name>
      <APILanguage>c</APILanguage>
      <Type>econst</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_requirement_8h.html</Path>
    <Anchor>a11ce26a584153a37e54d73ed50088fe5ad264b77b9ac0379e76d14b6d56570199</Anchor>
    <Abstract>According to SemVer, technically all 0.y.z releases can break backwards compatibility, meaning that minor and patch versions have to match exactly in order to be &quot;compatible.&quot;. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateResolver</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_resolver_8h.html</Path>
    <Anchor>a88abb61ee5d06edcff0af18e3595d797</Anchor>
    <Abstract>Creates a dependency resolver, implemented using the given behaviors, which will attempt to pick comp...</Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolverContext</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_resolver_8h.html</Path>
    <Anchor>a75b6c5e452ea46b04c8c20571dd9498d</Anchor>
    <Abstract>Returns any context data which was provided to ArbiterCreateResolver(). </Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolverCreateResolvedDependencyGraph</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_resolver_8h.html</Path>
    <Anchor>a5efe4c91a22e7acd84d0cf20c78d513f</Anchor>
    <Abstract>Attempts to resolve all dependencies. </Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateCopy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_types_8h.html</Path>
    <Anchor>a967537a5789b2134a33116a65260abd7</Anchor>
    <Abstract>Creates a copy of an Arbiter object. </Abstract>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateDescription</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_types_8h.html</Path>
    <Anchor>aa4d785bb08d81f4147ac1657860c8f5f</Anchor>
    <Abstract>Creates a NUL-terminated string description of an Arbiter object. </Abstract>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterEqual</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_types_8h.html</Path>
    <Anchor>aea8da7965ab8070d8c3c323f925ae050</Anchor>
    <Abstract>Returns whether two Arbiter objects are equal. </Abstract>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterFree</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_types_8h.html</Path>
    <Anchor>ab3baf6244ea94c955233d6715c00e8af</Anchor>
    <Abstract>Frees an Arbiter object. </Abstract>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>src_2_types_8h.html</Path>
    <Anchor>a241a529114bc559fd3dec66b5c562b44</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>src_2_value_8h.html</Path>
    <Anchor>a0cbbba06d9a26b9b806a63c8ecb5bf0f</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shareUserContext</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a4a5d973c859fb9b1232a39307f73ead7</Anchor>
    <Abstract>Converts an ArbiterUserContext into a shared pointer, automatically invoking its destructor when the ...</Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCompareVersionOrdering</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a9f2f418f3c237dd22cf0fd9c570e9282</Anchor>
    <Abstract>Orders two semantic versions relative to each other. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateSelectedVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a10a48316d9fe53bbb03ca825b6aede54</Anchor>
    <Abstract>Creates a selected version which corresponds to the given semantic version. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateSelectedVersionList</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a07f6210a32dde270ac1b29338c5f25c3</Anchor>
    <Abstract>Creates a version list which wraps a C array of ArbiterSelectedVersion objects. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateSemanticVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a27dd48159dbc855ca290f55d0e9fc299</Anchor>
    <Abstract>Creates a semantic version with the given components. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterCreateSemanticVersionFromString</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>af4e5aa3f0b2f888377149a5bf67d28e2</Anchor>
    <Abstract>Attempts to parse the given NUL-terminated string into a semantic version, returning NULL if a parse ...</Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterGetBuildMetadata</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a21ff3211cabef158b268257106ffd231</Anchor>
    <Abstract>Returns the build metadata string from a semantic version, or NULL if there is not one associated wit...</Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterGetMajorVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a14b23e4030a59c28102289beab2cec4e</Anchor>
    <Abstract>Returns the major version number (X.y.z) from a semantic version. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterGetMinorVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a471e9b05b540d8efc80737d29f11b38b</Anchor>
    <Abstract>Returns the minor version number (x.Y.z) from a semantic version. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterGetPatchVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a1e428cb93990de40fb284bca2a6f6b3c</Anchor>
    <Abstract>Returns the patch version number (x.y.Z) from a semantic version. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterGetPrereleaseVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a0c485c0aa5b651d576acc7a0b6f88e69</Anchor>
    <Abstract>Returns the prerelease version string from a semantic version, or NULL if there is not one associated...</Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSelectedVersionMetadata</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>aa75b8ec3b12a076b5cd748c1c465cc79</Anchor>
    <Abstract>Returns any metadata pointer which was provided to ArbiterCreateSelectedVersion(). </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSelectedVersionSemanticVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>include_2arbiter_2_version_8h.html</Path>
    <Anchor>a91dafaf64fb02b4f1f0c0e63b37d5a8f</Anchor>
    <Abstract>Returns the semantic version which corresponds to the given selected version, or NULL if there is no ...</Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>maybeAt</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>afdfd994bc91edf366d1acd8469e6017e</Anchor>
    <Abstract>Looks up a key in a map, returning the corresponding value if it exists. </Abstract>
    <DeclaredIn>Algorithm.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reset</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a06a8b9c7372bcb77fd89b3a423016f0e</Anchor>
    <Abstract>Resets a swappable value to its default constructor. </Abstract>
    <DeclaredIn>Algorithm.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_exception_8h.html</Path>
    <Anchor>a1bd757a3ccca0b86552b12de5a4afb91</Anchor>
    <DeclaredIn>Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hashOf</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a7c177714e947121b6413560c539678a0</Anchor>
    <Abstract>Hashes an arbitrary value that has an std::hash specialization. </Abstract>
    <DeclaredIn>Hash.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IteratorResultVector</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a94a393a7560bf93adc8bab571d5e5854</Anchor>
    <Abstract>The result type of an iterator which yields dynamically-created vectors. </Abstract>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeIteratorRange</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a26165c9469283c29c39f2ab8b81b5347</Anchor>
    <Abstract>Creates an IteratorRange encompassing the entirety of the given collection. </Abstract>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeIteratorRange</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a5f1578878f0a745be155f724ebb0d3aa</Anchor>
    <Abstract>Creates an IteratorRange encompassing the entirety of the given read-only collection. </Abstract>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeOptional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a4b82513a599ffc981e266727d81e816b</Anchor>
    <Abstract>Creates an Optional from a value, inferring its type. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a1d6bb8d6cdbfd55339357539ceb16d80</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>copyAcquireCString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a7314319b682320ab1b01dfd3f7876cc4</Anchor>
    <Abstract>Returns a string which is a copy of str, which will then be freed. </Abstract>
    <DeclaredIn>ToString.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>copyCString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>af0c3788361a5e2d3e88ed665498fec62</Anchor>
    <Abstract>Returns a unique_ptr which wraps a NUL-terminated copy of the c_str() of the given string...</Abstract>
    <DeclaredIn>ToString.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a15c4c9cb7a48232e28ad2165fa35d1b3</Anchor>
    <Abstract>Converts an arbitrary value into a string, using operator&lt;&lt;. </Abstract>
    <DeclaredIn>ToString.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>acquireCString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>acc4e6b2707595090e00a60bbb81f3f82</Anchor>
    <Abstract>Returns a unique_ptr which takes ownership of str. </Abstract>
    <DeclaredIn>ToString.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>md_CONTRIBUTING</Name>
      <APILanguage>markdown</APILanguage>
    </TokenIdentifier>
    <Path>md__c_o_n_t_r_i_b_u_t_i_n_g.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependency</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Abstract>Represents a dependency specification, which consists of a project identifier and a version requireme...</Abstract>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependency</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>a18646b35930fe215549d90f40c6b7fb7</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependency</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>a5db242ea37875c7ad5db0658c1380b0b</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>a68c62965f0e2fc006050644a0f42f79e</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>a4a3354b15b33019d9bde5f9168ec6ca2</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a1702d5cf97be9fc082f4a7ecd436e74a</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>a2dd8196107d4e409de2e1b811b4b2d32</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>a8f739e52f29c04ef8c2e5ce175862671</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>a75af4e0f72ce1dc1d6e198d996ee0dbd</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>requirement</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>a65ae164d64fbd1d41a29e60c07b0d8ca</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_projectIdentifier</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency.html</Path>
    <Anchor>a6d689040e0aad5aa5f77c956de9123e0</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependencyList</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Abstract>Represents a list of dependencies. </Abstract>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependencyList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>a9aa2c8abc462de6fdc88e8af39429e4f</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependencyList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>af2b9274aa6d6b7a3949274c73100a2af</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependencyList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>ae2d35a204c0b46feffbf7eb52902ad99</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterDependencyList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>a135f95801b2ab3f386ca5b62b130a94e</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>ae05890286a32544e57471f5747e932f3</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>a8e4628fd50f6c8fce2fe8651495e280a</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a1702d5cf97be9fc082f4a7ecd436e74a</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>abc68a72a017cfd8dab52adb4b505b01b</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>a646b783bb794c037f21f988149cce5e6</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>a4b6195b147552a01f3e93931cc01f43f</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_dependencies</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterDependencyList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_dependency_list.html</Path>
    <Anchor>a97ae63be6483d202ae8c5bbeb5fa56f6</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterProjectIdentifier</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Abstract>An opaque value which identifies a project participating in dependency resolution. </Abstract>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>a4c25c9af6da917d4e111d17115fd59f5</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterProjectIdentifier</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>aae2ae2fdf64117cb99a0190f578703a3</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterProjectIdentifier</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>a8c28e3259150288a9be44d39a998cb79</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>a5df9ee524c910c7e82fc1ed2a5138cbc</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>a4cb9217a1f9ebcf8903fd37f5d1574a5</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a1702d5cf97be9fc082f4a7ecd436e74a</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>a11965c262553d66c54f82ee2d49b6ef7</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>a30e5c8a42cfc2b1c22bf2dfacd3031bf</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterProjectIdentifier</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_project_identifier.html</Path>
    <Anchor>a86429cc4755c14bc209df117bc0e2a2e</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterRequirement</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Abstract>Represents a requirement for a specific version or set of versions. </Abstract>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a41f182ec31bb4a00eb716a762037cb75</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cloneRequirement</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>ae7b4cdb283d63d7151bde527f19028e7</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a6d2d0b8164d1d0e9ac475de4a9fa0c03</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>aee888ebe67d75d843ca47e5c81111eff</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>intersect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>af648f56a3f2aab2338aae494c19c4654</Anchor>
    <Abstract>Attempts to create a requirement which expresses the intersection of this requirement and the given o...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a1702d5cf97be9fc082f4a7ecd436e74a</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a0ad7b4c9d4a16d93aac4886e09e67244</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>priority</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>ad36af6b864a09e36648d0e3049f1003c</Anchor>
    <Abstract>Returns the priority of this requirement. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a1570b6256c354408053b5596c6403bca</Anchor>
    <Abstract>Returns whether this requirement would be satisfied by using the given selected version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>visit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a019ef1e583c4d52fa240a579494b084a</Anchor>
    <Abstract>Visits the requirement, then any child requirements. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependency</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterResolvedDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency.html</Path>
    <Abstract>Represents a dependency which has been resolved to a specific version. </Abstract>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependency</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency.html</Path>
    <Anchor>a4f167e3c39287973c68c5c2a9db1e9f0</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency.html</Path>
    <Anchor>a42825993668b6bf513b06da25f321f3a</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency.html</Path>
    <Anchor>a541521d2c8856b5646437c77084ca331</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a1702d5cf97be9fc082f4a7ecd436e74a</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency.html</Path>
    <Anchor>a16d5f060966d1fe92a43ad4ad6cbb73d</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency.html</Path>
    <Anchor>ad9bd999137009a0eb56a43508d6aec00</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_project</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterResolvedDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency.html</Path>
    <Anchor>a2f3abc0c734ca77e89630294451609de</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_version</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterResolvedDependency</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency.html</Path>
    <Anchor>addf77cd937a0ca7c20f9872671cf285c</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyGraph</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterResolvedDependencyGraph</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph.html</Path>
    <Abstract>Represents a fully consistent, resolved dependency graph, preserving relationships between dependenci...</Abstract>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EdgeMap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ArbiterResolvedDependencyGraph</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph.html</Path>
    <Anchor>a4eab47c99b9241b63a76fa869ca8bc15</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NodeKey</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ArbiterResolvedDependencyGraph</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph.html</Path>
    <Anchor>a91d5eff951f680fa0cc48a983e2982eb</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NodeMap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ArbiterResolvedDependencyGraph</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph.html</Path>
    <Anchor>a1865f689fc8a887fc3f0afed09cc2719</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyGraph</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph.html</Path>
    <Anchor>ab7df485a3b86b0789734fdad14549569</Anchor>
    <Abstract>Attempts to add the given node into the graph, as a dependency of dependent if specified. </Abstract>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyGraph</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph.html</Path>
    <Anchor>ad84303825c641ffe0fee75624e169362</Anchor>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createInstaller</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyGraph</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph.html</Path>
    <Anchor>a0f99af5a5887915d8eb2e2777897e842</Anchor>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyGraph</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph.html</Path>
    <Anchor>ae349412578db2c6ef6050454510cc9a8</Anchor>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>edges</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyGraph</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph.html</Path>
    <Anchor>a0d7330956dd5fc22c0f953f5d8a315ab</Anchor>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nodes</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyGraph</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph.html</Path>
    <Anchor>a5add25ff3d6c73937a7b00d858eb8949</Anchor>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a1702d5cf97be9fc082f4a7ecd436e74a</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyGraph</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph.html</Path>
    <Anchor>a25bfdd2a964b3df50668b510ac2af62d</Anchor>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>resolveNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyGraph</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph.html</Path>
    <Anchor>a348bb3c848f86a4474e28c33ca063308</Anchor>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>resolveNode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyGraph</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph.html</Path>
    <Anchor>a33298ddefee4e0da871bfc48fdcb03f5</Anchor>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyGraph::NodeValue</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterResolvedDependencyGraph::NodeValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph_1_1_node_value.html</Path>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NodeValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyGraph::NodeValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph_1_1_node_value.html</Path>
    <Anchor>aab862e0f7710f666cc15d6b05fe14374</Anchor>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyGraph::NodeValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph_1_1_node_value.html</Path>
    <Anchor>a7aea7a1e5762aad325a61d7a6f63edaa</Anchor>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>requirement</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyGraph::NodeValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph_1_1_node_value.html</Path>
    <Anchor>ac3241c4b107b411096c626014d08c28f</Anchor>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_version</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterResolvedDependencyGraph::NodeValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_graph_1_1_node_value.html</Path>
    <Anchor>ae9dd5c87245b0a66b34851537a1272f9</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyInstaller</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterResolvedDependencyInstaller</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_installer.html</Path>
    <Abstract>Enumerates a resolved dependency graph in &quot;install order,&quot; where all projects listed within one phase...</Abstract>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PhaseSet</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ArbiterResolvedDependencyInstaller</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_installer.html</Path>
    <Anchor>a1d5e28adaa804142905105c66896ace8</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SortedEdgesMap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ArbiterResolvedDependencyInstaller</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_installer.html</Path>
    <Anchor>a17fc38a8e42f3af34e4cd0a190cbfa6f</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolvedDependencyInstaller</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyInstaller</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_installer.html</Path>
    <Anchor>abf21904f1242f32b6c9b37e91b0a7ef0</Anchor>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyInstaller</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_installer.html</Path>
    <Anchor>aa3b3ab53fee0403a94763a47a80fb48c</Anchor>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>contains</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyInstaller</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_installer.html</Path>
    <Anchor>a286c0a4b8c8efe3877a91fd3dd796f1b</Anchor>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>countInPhase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyInstaller</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_installer.html</Path>
    <Anchor>a55afd12e880aff6235f1899a8159ac35</Anchor>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyInstaller</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_installer.html</Path>
    <Anchor>ab75fbff2629af537ebf41b0286796a32</Anchor>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a1702d5cf97be9fc082f4a7ecd436e74a</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolvedDependencyInstaller</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_installer.html</Path>
    <Anchor>a53605586209b5c7c58e34e487fa54202</Anchor>
    <DeclaredIn>Graph.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_edges</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterResolvedDependencyInstaller</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_installer.html</Path>
    <Anchor>a0d38dcc79f1cb37c82e7b0bfcae87d8b</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_phases</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterResolvedDependencyInstaller</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolved_dependency_installer.html</Path>
    <Anchor>a83a8053165566bc575353223a7de587c</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolver</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Abstract>A dependency resolver which contains context about how to evaluate the dependency graph...</Abstract>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolver</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>adcd7696effcaf3100d17cc0108119e99</Anchor>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolver</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>a73c3122e49679288bf62e5b6083ccd73</Anchor>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>availableVersionsSatisfying</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>aa86e4d0ed05739bd3ca8d3d62d99e769</Anchor>
    <Abstract>Computes a list of available versions for the specified project which satisfy the given requirement...</Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>a46567e82710eebee0d6e113cd1c9a8fb</Anchor>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>a7f140e9b3ffc3db12c1d820c59f4ca08</Anchor>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fetchAvailableVersions</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>a62c3379058d6baca4625d5afceb2d107</Anchor>
    <Abstract>Fetches the list of available versions for the given project. </Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fetchDependencies</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>a3e9ec2a7efe6a1c20d5c15efa189a362</Anchor>
    <Abstract>Fetches the list of dependencies for the given project and version. </Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fetchSelectedVersionForMetadata</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>aaaa1e70927bda6afbb9922caf62c97ea</Anchor>
    <Abstract>Fetches a selected version for the given metadata string. </Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a1702d5cf97be9fc082f4a7ecd436e74a</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>acd7fba5859a07c6710a42182187f19f7</Anchor>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>a9b7bd0cc614d2ea3c2a54be2f7f53246</Anchor>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>resolve</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>aed77f5e43cd1fd0f56087a35aef4bf82</Anchor>
    <Abstract>Attempts to resolve all dependencies. </Abstract>
    <DeclaredIn>Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_context</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterResolver</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver.html</Path>
    <Anchor>ae9ae0780bdbb0b7dae14a7b23cc454b0</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterResolverBehaviors</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterResolverBehaviors</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver_behaviors.html</Path>
    <Abstract>User-provided behaviors for how dependency resolution should work. </Abstract>
    <DeclaredIn>arbiter/Resolver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createAvailableVersionsList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterResolverBehaviors</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver_behaviors.html</Path>
    <Anchor>a5e58d671818c4ceb8dd4ba62d6fd42a9</Anchor>
    <Abstract>Requests the list of versions available for a given project. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createDependencyList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterResolverBehaviors</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver_behaviors.html</Path>
    <Anchor>a8a53fd0268af2d9b9c4933ca9c87c271</Anchor>
    <Abstract>Requests the list of dependencies needed by a specific version of a project. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createSelectedVersionForMetadata</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterResolverBehaviors</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_resolver_behaviors.html</Path>
    <Anchor>ab09cacf6772a92a7b1d7f1361ee656f6</Anchor>
    <Abstract>Requests the selected version which corresponds to the given metadata. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSelectedVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Abstract>Represents a &quot;selected&quot; version, which is a concrete choice of a real project version. </Abstract>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Metadata</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>a883198df77e7d43882095daa57e2fb02</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSelectedVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>aaab0852ad249f384e56db924a9a37c4e</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>aab751e0d051bf058c010877c01dbef77</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>a9b72afcedab55ac5296d035c25cbbf2a</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a1702d5cf97be9fc082f4a7ecd436e74a</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>adb453cdfc69d41ef8746b74a2c020fb9</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>a84e4b85b7f8502c3faedc919e66ade38</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>a581132134845297b658ed775db4a92bf</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>a23dd39d969dcb263422b1307aeb6785e</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>a69dd31f055cd297d69d8b08e394cdfe6</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_metadata</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>a3c2870d90dc94174d4be6addc33862ae</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_semanticVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSelectedVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version.html</Path>
    <Anchor>a38ca96a36b6d198ecd3f55b7aae6e65c</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSelectedVersionList</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterSelectedVersionList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version_list.html</Path>
    <Abstract>Represents a list of selected versions. </Abstract>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSelectedVersionList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersionList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version_list.html</Path>
    <Anchor>a9f90fefa9407ac232c4cec145148beee</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSelectedVersionList</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersionList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version_list.html</Path>
    <Anchor>aa5e441bd0d03ba5e2418ea6324015bdc</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersionList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version_list.html</Path>
    <Anchor>a909833ec8c01c30c35e2d27ad2efaaba</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersionList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version_list.html</Path>
    <Anchor>a578c1d905b65dc52881f178a4372cc7b</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a1702d5cf97be9fc082f4a7ecd436e74a</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSelectedVersionList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version_list.html</Path>
    <Anchor>a3ae3c977b51300de27488643e590a25d</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_versions</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSelectedVersionList</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_selected_version_list.html</Path>
    <Anchor>ad273ed0c04d6356c8df1596bdd3b8bb2</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSemanticVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Abstract>Represents a semantic version, as defined by semver.org. </Abstract>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterSemanticVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a0b46dd969de2b8b678d75bb6e355634a</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>ae24943a7ff517e9fbfa734fd20e77f9c</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>afeef0a1d4fb3c88cdaa010bccde6bc7c</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a1702d5cf97be9fc082f4a7ecd436e74a</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>ad4d8aa4fa5bd81696639261cae3ae71f</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>ac101f9419095a6c6ac7b9356742777a3</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a19650855537586b806c8fa4714daaddb</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a733f85fef98a58a7f6d7cdc5eed63cfa</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a84171ed39f4687336287d9193a0763ed</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a202eeeb164ea227fc869d17ef3b7d90e</Anchor>
    <Abstract>Attempts to parse a well-formed semantic version from a string. </Abstract>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_buildMetadata</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a704f664242e1e765f692419ea1e21810</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_major</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>aa40218723a2c55f5b25a3853d8175fdf</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_minor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>aa06ae0e067e7b4ea5291e82e65c5f5fe</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_patch</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a6f635c501dbec7602e1b092f0e3e724f</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_prereleaseVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterSemanticVersion</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_semantic_version.html</Path>
    <Anchor>a4c9e7a3d6669b55029f98cef482f7726</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterUserContext</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterUserContext</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_context.html</Path>
    <Abstract>Represents opaque data that can be passed to Arbiter data types and functionality, then later retrieved. </Abstract>
    <DeclaredIn>arbiter/Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterUserContext</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_context.html</Path>
    <Anchor>a97f275e4272b241b8281690c08b00b11</Anchor>
    <Abstract>The underlying data pointer. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>destructor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterUserContext</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_context.html</Path>
    <Anchor>a50842ef3533de13de68829492f069dd0</Anchor>
    <Abstract>A cleanup function to call when the ArbiterUserContext is done being used. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArbiterUserValue</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ArbiterUserValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_value.html</Path>
    <Abstract>Represents an arbitrary value type that can be associated with Arbiter data types and functionality...</Abstract>
    <DeclaredIn>arbiter/Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createDescription</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterUserValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_value.html</Path>
    <Anchor>a24b7de90b02aa6e93e6ff39669022cb0</Anchor>
    <Abstract>An operation to convert this data object to a string. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterUserValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_value.html</Path>
    <Anchor>a21ad42b0d600af18edb221b0cc7a2870</Anchor>
    <Abstract>The underlying data object. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>destructor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterUserValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_value.html</Path>
    <Anchor>a46326f865baa51148191f64d69846e5f</Anchor>
    <Abstract>A cleanup function to call when the ArbiterUserValue is done being used. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>equalTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterUserValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_value.html</Path>
    <Anchor>a58ad30575098fbeaba0cf57bf4fa80ac</Anchor>
    <Abstract>An equality operation over two data objects. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterUserValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_value.html</Path>
    <Anchor>a0bbe1c09aa9b1d1ae8872d613576e6d5</Anchor>
    <Abstract>Generates a hash of the data object. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>lessThan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>ArbiterUserValue</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_user_value.html</Path>
    <Anchor>a5581905b82a24eefd853a6ed055cde0f</Anchor>
    <Abstract>Returns whether first is less than (should be ordered before) second. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IteratorResultVector</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a94a393a7560bf93adc8bab571d5e5854</Anchor>
    <Abstract>The result type of an iterator which yields dynamically-created vectors. </Abstract>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>copyAcquireCString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a7314319b682320ab1b01dfd3f7876cc4</Anchor>
    <Abstract>Returns a string which is a copy of str, which will then be freed. </Abstract>
    <DeclaredIn>ToString.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>copyCString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>af0c3788361a5e2d3e88ed665498fec62</Anchor>
    <Abstract>Returns a unique_ptr which wraps a NUL-terminated copy of the c_str() of the given string...</Abstract>
    <DeclaredIn>ToString.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hashOf</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a7c177714e947121b6413560c539678a0</Anchor>
    <Abstract>Hashes an arbitrary value that has an std::hash specialization. </Abstract>
    <DeclaredIn>Hash.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeIteratorRange</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a26165c9469283c29c39f2ab8b81b5347</Anchor>
    <Abstract>Creates an IteratorRange encompassing the entirety of the given collection. </Abstract>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeIteratorRange</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a5f1578878f0a745be155f724ebb0d3aa</Anchor>
    <Abstract>Creates an IteratorRange encompassing the entirety of the given read-only collection. </Abstract>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeOptional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a4b82513a599ffc981e266727d81e816b</Anchor>
    <Abstract>Creates an Optional from a value, inferring its type. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>maybeAt</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>afdfd994bc91edf366d1acd8469e6017e</Anchor>
    <Abstract>Looks up a key in a map, returning the corresponding value if it exists. </Abstract>
    <DeclaredIn>Algorithm.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a1d6bb8d6cdbfd55339357539ceb16d80</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reset</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a06a8b9c7372bcb77fd89b3a423016f0e</Anchor>
    <Abstract>Resets a swappable value to its default constructor. </Abstract>
    <DeclaredIn>Algorithm.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shareUserContext</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a4a5d973c859fb9b1232a39307f73ead7</Anchor>
    <Abstract>Converts an ArbiterUserContext into a shared pointer, automatically invoking its destructor when the ...</Abstract>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>a15c4c9cb7a48232e28ad2165fa35d1b3</Anchor>
    <Abstract>Converts an arbitrary value into a string, using operator&lt;&lt;. </Abstract>
    <DeclaredIn>ToString.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>acquireCString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter.html</Path>
    <Anchor>acc4e6b2707595090e00a60bbb81f3f82</Anchor>
    <Abstract>Returns a unique_ptr which takes ownership of str. </Abstract>
    <DeclaredIn>ToString.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Base</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Abstract>Base class for public-facing Arbiter types, such that they automatically get freeing, cloning, equality, and description functionality. </Abstract>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~Base</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>acf308cb34de270b459f02640270e52e3</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a41f182ec31bb4a00eb716a762037cb75</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a6d2d0b8164d1d0e9ac475de4a9fa0c03</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a1702d5cf97be9fc082f4a7ecd436e74a</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a0ad7b4c9d4a16d93aac4886e09e67244</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::IteratorRange</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Arbiter::IteratorRange</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_iterator_range.html</Path>
    <Abstract>Represents a pair of iterators bracketing the start and end of a range. </Abstract>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IteratorRange</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::IteratorRange</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_iterator_range.html</Path>
    <Anchor>a12d25712d6376d28b13ca4368f47e3ec</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_begin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::IteratorRange</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_iterator_range.html</Path>
    <Anchor>adccd6a1189b08ef2babe2ad4f9b71137</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_end</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::IteratorRange</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_iterator_range.html</Path>
    <Anchor>a43dbba1ed47b73473d4136d62df6fb6d</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::MultipassIterator</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Arbiter::MultipassIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_multipass_iterator.html</Path>
    <Abstract>Contains the state necessary to perform an algorithm over an iterator multiple times. </Abstract>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MultipassIterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::MultipassIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_multipass_iterator.html</Path>
    <Anchor>a4d9b059e35c2f01bad9ae651553fc673</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MultipassIterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::MultipassIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_multipass_iterator.html</Path>
    <Anchor>ab7a8c58804ad6d9c5d4a6c8f59d25bd5</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MultipassIterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::MultipassIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_multipass_iterator.html</Path>
    <Anchor>abb8fe44afe4be69298e977e081429c64</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MultipassIterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::MultipassIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_multipass_iterator.html</Path>
    <Anchor>a93ac06b6807ddca1bab8f688ed9776a7</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator bool</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::MultipassIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_multipass_iterator.html</Path>
    <Anchor>a6e8282133e23611f0032264e75ccca19</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::MultipassIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_multipass_iterator.html</Path>
    <Anchor>aaf54bc62da8c1649e085398a9026db32</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::MultipassIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_multipass_iterator.html</Path>
    <Anchor>af0c817447315a29ea7199a49c0856437</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reset</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::MultipassIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_multipass_iterator.html</Path>
    <Anchor>aefc371ed3541c2fe0f3f28c03ffd7474</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Optional</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Abstract>Represents a value which may or may not exist. </Abstract>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>ac7286ea9106e97c4960a2ab1bf0a30e4</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a7cab27d27a8b07ece2c8ac811ec15ce0</Anchor>
    <Abstract>Creates an empty Optional. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>abb0208a623c70842ef2dfa08267d6054</Anchor>
    <Abstract>Creates an empty Optional. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a31d1defc6884d9d87aa27d2f9887166c</Anchor>
    <Abstract>Creates an Optional containing a copy of the given value. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a12eed362a9115a098e30294d6d7dd19c</Anchor>
    <Abstract>Creates an Optional containing the given value. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>afc3fb10d4fe7d66035da60c55bac8ddd</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>ac1835fbbab4382fbcc146f0985fac749</Anchor>
    <Abstract>Converts from another Optional containing a compatible type. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>ae2eb3543d5eec037600bbb95569cc96c</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a0aa251c8f2489ca700a0a2c949dcc991</Anchor>
    <Abstract>Converts from another Optional containing a compatible type. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~Optional</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a44d6dd8c9529cae4f719b35f4509a7be</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator bool</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>ac0cba62a0a3e59847cb7616284c4e14d</Anchor>
    <Abstract>Returns true if this Optional contains a value, or false if it is empty. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a71fbb329eb7bf4f224882768c0e2fe1f</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a67874d7ed97a2b6396a5ac96c352d7e0</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>afd33da27d67b8736460e2b64aedea999</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>aa87a3c5f5bbf44631950c3a8f5c19651</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a006f8d063762614ced4d57e13a675fa5</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>ab9a1947868059d25520796b4d3954757</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pointer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>aadf0e3fa1cfe29239b909f342700da30</Anchor>
    <Abstract>Returns a pointer to the value in the Optional, or nullptr if empty. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pointer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a8cac888ce5f79faec4e1e0319db391c0</Anchor>
    <Abstract>Returns a pointer to the value in the Optional, or nullptr if empty. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a67b927fa3eaddc25997dff085a0b43d1</Anchor>
    <Abstract>Accesses the value in the Optional. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a9541a3b15317b4d08a20c3a4f8a00a61</Anchor>
    <Abstract>Accesses the value in the Optional. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromPointer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Optional</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_optional.html</Path>
    <Anchor>a0431253af1dff49a6e553af0a2e149fa</Anchor>
    <Abstract>Creates an Optional from a pointer which may or may not be null. </Abstract>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::PermutationIterator</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Arbiter::PermutationIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_permutation_iterator.html</Path>
    <Abstract>An iterator which generates every possible combination of the values of other iterators. </Abstract>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PermutationIterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::PermutationIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_permutation_iterator.html</Path>
    <Anchor>a4d5265385a22860b1593efd69ca5734d</Anchor>
    <Abstract>Creates an empty iterator. </Abstract>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PermutationIterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::PermutationIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_permutation_iterator.html</Path>
    <Anchor>ae7122e1e586cfd7f1abb5cb8bed815a3</Anchor>
    <Abstract>Creates an iterator which will create all possible combinations between the given ranges...</Abstract>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator bool</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::PermutationIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_permutation_iterator.html</Path>
    <Anchor>a4803c51d4c512d36fc1f6ddb046deba0</Anchor>
    <Abstract>Returns whether the iterator is valid (i.e., dereferenceable). </Abstract>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::PermutationIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_permutation_iterator.html</Path>
    <Anchor>a8831bc7941b063d22161e2033341980b</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::PermutationIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_permutation_iterator.html</Path>
    <Anchor>a7234858268be786584f5048ee05ecbba</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::PermutationIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_permutation_iterator.html</Path>
    <Anchor>a7cd4ca9995a189a7dc058869ca2c58c5</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::PermutationIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_permutation_iterator.html</Path>
    <Anchor>ade84314f66d4f373ae5ecb97ccde84e5</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::PermutationIterator</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_permutation_iterator.html</Path>
    <Anchor>a74f4997de7b3fab887acdc405d4775fe</Anchor>
    <DeclaredIn>Iterator.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::SharedUserValue</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Abstract>Expresses shared ownership of an opaque user-provided value type, which was originally described in a...</Abstract>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SharedUserValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a67f6081caaa70e97d9f5fd76925914a7</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SharedUserValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>ada413b15e8db1702aeb58f63d9dab7fd</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>ab1848961bb2e8175356faebdde486521</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a1c1ea39cd324deb0c366a8eb8e632222</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>description</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a8dbad079913f79985b5fca3fbc9e3676</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>ad0fa346041d02a9c51d1e1930e363e8f</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a7cefce6d4cc510bf7f4b35824bb247ac</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>ab2b72e990cd47bdc14bcd2ab99c4dc05</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a57e111adda185f8c9a9ce46b18c508ce</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a67d3d56fc94c4d5d6ba7689aa3245fb1</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a3017d0f91733163e9b4815f697b2c5f5</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::SharedUserValue</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_shared_user_value.html</Path>
    <Anchor>a8d6115ada3fc80093ec0af8fa79135cb</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Exception</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>Arbiter::Exception</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter_1_1_exception.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Exception::Base</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Exception::Base</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_base.html</Path>
    <Abstract>Base type for Arbiter exceptions. </Abstract>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Base</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Exception::Base</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_base.html</Path>
    <Anchor>a6ddd88907768207d9b8a1540e241eec5</Anchor>
    <DeclaredIn>Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Base</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Exception::Base</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_base.html</Path>
    <Anchor>a2243931aeb7b6d102780345141ff92db</Anchor>
    <DeclaredIn>Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Exception::MutuallyExclusiveConstraints</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Exception::MutuallyExclusiveConstraints</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_mutually_exclusive_constraints.html</Path>
    <Abstract>Exception type indicating that there were mutually exclusive constraints in a proposed dependency gra...</Abstract>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MutuallyExclusiveConstraints</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Exception::MutuallyExclusiveConstraints</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_mutually_exclusive_constraints.html</Path>
    <Anchor>ad2d6c4d299a18fa20c3b15a17adb22e2</Anchor>
    <DeclaredIn>Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Exception::UnsatisfiableConstraints</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Exception::UnsatisfiableConstraints</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_unsatisfiable_constraints.html</Path>
    <Abstract>Exception type indicating that there were unsatisfiable constraints for the selected versions in a pr...</Abstract>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UnsatisfiableConstraints</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Exception::UnsatisfiableConstraints</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_unsatisfiable_constraints.html</Path>
    <Anchor>a5350881d69f0c4523ca241c75366c819</Anchor>
    <DeclaredIn>Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Exception::UserError</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Exception::UserError</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_user_error.html</Path>
    <Abstract>Exception type representing an error that was returned from Arbiter client code. </Abstract>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UserError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Exception::UserError</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_user_error.html</Path>
    <Anchor>aa6f8bf174919c720eed120e296597317</Anchor>
    <DeclaredIn>Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UserError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>Arbiter::Exception::UserError</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_1_1_exception_1_1_user_error.html</Path>
    <Anchor>a2c2f043158e7bcd1454d212bfb351e11</Anchor>
    <DeclaredIn>Exception.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Requirement</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>Arbiter::Requirement</Scope>
    </TokenIdentifier>
    <Path>namespace_arbiter_1_1_requirement.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Requirement::Any</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Abstract>A requirement satisfied by any version. </Abstract>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Anchor>a342a825fc107da85c0d1031f6365ca03</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cloneRequirement</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>ae7b4cdb283d63d7151bde527f19028e7</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Anchor>af5c258eb369d5c75a86b2bc712bb465a</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Anchor>abeaa7af42cff6d51649e5f57907e27d2</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>intersect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Anchor>a5798578d8bf5889ab05bf5d1ad91ccb2</Anchor>
    <Abstract>Attempts to create a requirement which expresses the intersection of this requirement and the given o...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a1702d5cf97be9fc082f4a7ecd436e74a</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Anchor>ae55189e5b63f55af646680fb682b17af</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>priority</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>ad36af6b864a09e36648d0e3049f1003c</Anchor>
    <Abstract>Returns the priority of this requirement. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Anchor>a26b1ae2c0d13a2266ce8e3153ea9d2e1</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Any</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_any.html</Path>
    <Anchor>a4b31694dbc94ad27640f287bc13138b4</Anchor>
    <Abstract>Returns whether this requirement would be satisfied by using the given selected version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>visit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a019ef1e583c4d52fa240a579494b084a</Anchor>
    <Abstract>Visits the requirement, then any child requirements. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Requirement::AtLeast</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Abstract>A requirement satisfied only by versions greater than or equal to the specified one. </Abstract>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AtLeast</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>a73c21686e5e593b532b8c61328f71ba1</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>ad360526ef253ab7d24b83c7b5912b95f</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cloneRequirement</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>ae7b4cdb283d63d7151bde527f19028e7</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>ab4e79174fb32a507ff83713019e2f6e6</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>ab01fe6887cc1a30b7744f3105880b8f6</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>intersect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>aebb7508a3265c5ca7be1429df382680f</Anchor>
    <Abstract>Attempts to create a requirement which expresses the intersection of this requirement and the given o...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a1702d5cf97be9fc082f4a7ecd436e74a</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>a4f283d0f4abf891b8ba688558c7bd131</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>priority</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>ad36af6b864a09e36648d0e3049f1003c</Anchor>
    <Abstract>Returns the priority of this requirement. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>afeac4ce135d73402cacdd0e7bedc9391</Anchor>
    <Abstract>Returns whether this requirement would be satisfied by using the given selected version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>a0f35f98c6b26c93d73af2971aede4a81</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>visit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a019ef1e583c4d52fa240a579494b084a</Anchor>
    <Abstract>Visits the requirement, then any child requirements. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_minimumVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::Requirement::AtLeast</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_at_least.html</Path>
    <Anchor>a9bf0d27047931565ad1c4732cb005902</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Requirement::CompatibleWith</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Abstract>A requirement satisfied only by versions which are &quot;compatible with&quot; the specified one...</Abstract>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CompatibleWith</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>a02bfcf4d29d86c926d75179a35e9959b</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>a0f860ecfe9b7d4246ebfc3c3110b7f54</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cloneRequirement</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>ae7b4cdb283d63d7151bde527f19028e7</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>a53ee282b972af333b1154badf33d0f35</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>a2433b4d02554bf658276e420b0303b97</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>intersect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>a5b168eba5102ed5e24ce7900569aa94a</Anchor>
    <Abstract>Attempts to create a requirement which expresses the intersection of this requirement and the given o...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a1702d5cf97be9fc082f4a7ecd436e74a</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>a02bbddc585c9a44359b5e90fcf0a4c23</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>priority</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>ad36af6b864a09e36648d0e3049f1003c</Anchor>
    <Abstract>Returns the priority of this requirement. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>a05de17d62e859292f4da8c9b27b34613</Anchor>
    <Abstract>Returns whether this requirement would be satisfied by using the given selected version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>a296a0bfe4220c9a5ffd28513ec8db287</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>visit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a019ef1e583c4d52fa240a579494b084a</Anchor>
    <Abstract>Visits the requirement, then any child requirements. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_baseVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>a8a940d45a588bf07f80f75b712eb991c</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_strictness</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::Requirement::CompatibleWith</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compatible_with.html</Path>
    <Anchor>aeebab6823ceef5aaa58b5d5ec5805d94</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Requirement::Compound</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Requirement::Compound</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compound.html</Path>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Compound</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Compound</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compound.html</Path>
    <Anchor>ac378b888c578ffac68b0f26afc28fdc8</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Compound</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compound.html</Path>
    <Anchor>a930fa84bc53a37c75c9b64b2c65f6e42</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cloneRequirement</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>ae7b4cdb283d63d7151bde527f19028e7</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Compound</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compound.html</Path>
    <Anchor>aca28a1b1e04f27b646512cf4cb0a1098</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Compound</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compound.html</Path>
    <Anchor>aa1d79502cd3bbfc57fd8b001a06e8c6f</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>intersect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Compound</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compound.html</Path>
    <Anchor>a3d4d7bbd20c0ba3013b66d7e9b52b4a9</Anchor>
    <Abstract>Attempts to create a requirement which expresses the intersection of this requirement and the given o...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a1702d5cf97be9fc082f4a7ecd436e74a</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Compound</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compound.html</Path>
    <Anchor>a66edef73ed2151eeb224a21cd81fe5c0</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>priority</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Compound</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compound.html</Path>
    <Anchor>a8f645462356f56ed14202ed95d5a0d74</Anchor>
    <Abstract>Returns the minimum priority index of all the requirements held by this compound requirement. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Compound</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compound.html</Path>
    <Anchor>aa04055696cfdcd6884daa53111d01a48</Anchor>
    <Abstract>Returns whether this requirement would be satisfied by using the given selected version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>visit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Compound</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compound.html</Path>
    <Anchor>a0427d267603bbe87adf9bb8e477dc0bc</Anchor>
    <Abstract>Visits the requirement, then any child requirements. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_requirements</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::Requirement::Compound</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_compound.html</Path>
    <Anchor>afc5a3f5ad265e2163026ad7a0a256aa0</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Requirement::Custom</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Requirement::Custom</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_custom.html</Path>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Custom</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Custom</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_custom.html</Path>
    <Anchor>ac703c34aee0e60564051b0d69d65b02e</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Custom</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_custom.html</Path>
    <Anchor>a8ec24e3d0b243d1d20b447365baaf37c</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cloneRequirement</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>ae7b4cdb283d63d7151bde527f19028e7</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Custom</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_custom.html</Path>
    <Anchor>a09a9dbfbddb3336d14a2d2acf930c29f</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Custom</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_custom.html</Path>
    <Anchor>a5d8ceec4fc7ddcca0b2e1c21c8444be1</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>intersect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Custom</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_custom.html</Path>
    <Anchor>a6980d22d2be9eef73d1f2c3f0cad5da4</Anchor>
    <Abstract>Attempts to create a requirement which expresses the intersection of this requirement and the given o...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a1702d5cf97be9fc082f4a7ecd436e74a</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Custom</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_custom.html</Path>
    <Anchor>ad3973438338e697d9ea7fc6a4529c49a</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>priority</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>ad36af6b864a09e36648d0e3049f1003c</Anchor>
    <Abstract>Returns the priority of this requirement. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Custom</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_custom.html</Path>
    <Anchor>ade240bbd50f3221c244701b94c15fd75</Anchor>
    <Abstract>Returns whether this requirement would be satisfied by using the given selected version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>visit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a019ef1e583c4d52fa240a579494b084a</Anchor>
    <Abstract>Visits the requirement, then any child requirements. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Requirement::Exactly</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Abstract>A requirement satisfied only by one particular semantic version. </Abstract>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Exactly</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>a099e9e4b9a8435f61d191f0b2b2a8563</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>ac5011dc0b68beaa35323c06a9ce27390</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cloneRequirement</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>ae7b4cdb283d63d7151bde527f19028e7</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>a16c11564e043222ba8346f792a9e2c26</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>a510e78c644df0f9c5258b3cdb59358da</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>intersect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>ae1b1c39087a3cbb4cbfc52aaefa972b1</Anchor>
    <Abstract>Attempts to create a requirement which expresses the intersection of this requirement and the given o...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a1702d5cf97be9fc082f4a7ecd436e74a</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>afc37dac873e9b627b3036c4cfd2894aa</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>priority</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>ad36af6b864a09e36648d0e3049f1003c</Anchor>
    <Abstract>Returns the priority of this requirement. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>ab89a5eacc646cbffb730dfd86ffe6fb5</Anchor>
    <Abstract>Returns whether this requirement would be satisfied by using the given selected version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>a740525f67f9c4c0cb2f27262851e2273</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>visit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a019ef1e583c4d52fa240a579494b084a</Anchor>
    <Abstract>Visits the requirement, then any child requirements. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_version</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::Requirement::Exactly</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_exactly.html</Path>
    <Anchor>aad38e1acf5d44a6941d40c46900ed335</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Requirement::Prioritized</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Requirement::Prioritized</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_prioritized.html</Path>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Prioritized</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Prioritized</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_prioritized.html</Path>
    <Anchor>a7aaf1599cd8fbf74949f204fca858f50</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Prioritized</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_prioritized.html</Path>
    <Anchor>af71d2f25ccd86c8c4f2cf3a0a54edc8c</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cloneRequirement</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>ae7b4cdb283d63d7151bde527f19028e7</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Prioritized</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_prioritized.html</Path>
    <Anchor>a542b5699e4053a275969c13a5ef913bf</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Prioritized</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_prioritized.html</Path>
    <Anchor>ad7d84c7c839072b059212716a3020ec9</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>intersect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Prioritized</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_prioritized.html</Path>
    <Anchor>a0105a30a6bf4ec45bee018436f9d819a</Anchor>
    <Abstract>Attempts to create a requirement which expresses the intersection of this requirement and the given o...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a1702d5cf97be9fc082f4a7ecd436e74a</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Prioritized</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_prioritized.html</Path>
    <Anchor>aaedbe79b70f780bdc8e4d8a05fa6fd70</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>priority</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Prioritized</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_prioritized.html</Path>
    <Anchor>a049c6c52a0e9cf00ec7b6940cfc90e9d</Anchor>
    <Abstract>Returns the priority of this requirement. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Prioritized</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_prioritized.html</Path>
    <Anchor>a41b16e7e3f243edce10091da34b502cf</Anchor>
    <Abstract>Returns whether this requirement would be satisfied by using the given selected version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>visit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Prioritized</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_prioritized.html</Path>
    <Anchor>a2d2bf7783fb7139fdf1d369b29948e87</Anchor>
    <Abstract>Visits the requirement, then any child requirements. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_requirement</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::Requirement::Prioritized</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_prioritized.html</Path>
    <Anchor>aa5b51eaa30f97d645f55a69f18c0308c</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Requirement::Unversioned</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Requirement::Unversioned</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_unversioned.html</Path>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Metadata</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>Arbiter::Requirement::Unversioned</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_unversioned.html</Path>
    <Anchor>a3778d81deb54f9a6888bfd5ec6d1298e</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Unversioned</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Unversioned</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_unversioned.html</Path>
    <Anchor>a6f93e30b74e49812510bc7287489a7c0</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Unversioned</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_unversioned.html</Path>
    <Anchor>a22646a7813d6319a1d867627da5a2460</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cloneRequirement</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>ae7b4cdb283d63d7151bde527f19028e7</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>describe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Unversioned</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_unversioned.html</Path>
    <Anchor>a23be6af015e48697878f4bdb9c7d90e2</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Unversioned</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_unversioned.html</Path>
    <Anchor>a5761124e337e664750ade5ec1c73cc4c</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>intersect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Unversioned</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_unversioned.html</Path>
    <Anchor>a8fde9ddafb80f8432425e4ccb9732316</Anchor>
    <Abstract>Attempts to create a requirement which expresses the intersection of this requirement and the given o...</Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Base</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_base.html</Path>
    <Anchor>a1702d5cf97be9fc082f4a7ecd436e74a</Anchor>
    <DeclaredIn>Types.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Unversioned</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_unversioned.html</Path>
    <Anchor>af8fa7d33a868f443500c4c1146173ef5</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>priority</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>ad36af6b864a09e36648d0e3049f1003c</Anchor>
    <Abstract>Returns the priority of this requirement. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>satisfiedBy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Unversioned</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_unversioned.html</Path>
    <Anchor>a59936aa570339ac5ec27b0b6b464df95</Anchor>
    <Abstract>Returns whether this requirement would be satisfied by using the given selected version. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>visit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>ArbiterRequirement</Scope>
    </TokenIdentifier>
    <Path>struct_arbiter_requirement.html</Path>
    <Anchor>a019ef1e583c4d52fa240a579494b084a</Anchor>
    <Abstract>Visits the requirement, then any child requirements. </Abstract>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_metadata</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Arbiter::Requirement::Unversioned</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_unversioned.html</Path>
    <Anchor>aabb3f9248784758b6fa46bfc1208a012</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Arbiter::Requirement::Visitor</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Arbiter::Requirement::Visitor</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_visitor.html</Path>
    <Abstract>Base class for objects that want to visit requirements. </Abstract>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~Visitor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Visitor</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_visitor.html</Path>
    <Anchor>ad74a5ca26444a076af42bb6daee6c87b</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Arbiter::Requirement::Visitor</Scope>
    </TokenIdentifier>
    <Path>class_arbiter_1_1_requirement_1_1_visitor.html</Path>
    <Anchor>a9efd8a558f790e45751ffcd0f4ab4646</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; Arbiter::Optional&lt; T &gt; &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; Arbiter::Optional&lt; T &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_1_1_optional_3_01_t_01_4_01_4.html</Path>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; Arbiter::Optional&lt; T &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_1_1_optional_3_01_t_01_4_01_4.html</Path>
    <Anchor>a12a6e46c822d9d537dd97543ef7c7c0d</Anchor>
    <DeclaredIn>Optional.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; Arbiter::SharedUserValue&lt; Owner &gt; &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; Arbiter::SharedUserValue&lt; Owner &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_1_1_shared_user_value_3_01_owner_01_4_01_4.html</Path>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; Arbiter::SharedUserValue&lt; Owner &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_1_1_shared_user_value_3_01_owner_01_4_01_4.html</Path>
    <Anchor>a2977f0748de8ae564cf9cb7aeadc0967</Anchor>
    <DeclaredIn>Value.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; ArbiterDependency &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; ArbiterDependency &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_dependency_01_4.html</Path>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; ArbiterDependency &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_dependency_01_4.html</Path>
    <Anchor>a8c2eed18eb43e7c75f34511aa5ee61c7</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; ArbiterProjectIdentifier &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; ArbiterProjectIdentifier &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_project_identifier_01_4.html</Path>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; ArbiterProjectIdentifier &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_project_identifier_01_4.html</Path>
    <Anchor>a6d084d7894cfc135ee805cbefb9b973b</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; ArbiterRequirement &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; ArbiterRequirement &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_requirement_01_4.html</Path>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; ArbiterRequirement &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_requirement_01_4.html</Path>
    <Anchor>ac6105352abeaf2d2e07f30d721eff110</Anchor>
    <DeclaredIn>Requirement.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; ArbiterResolvedDependency &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; ArbiterResolvedDependency &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_resolved_dependency_01_4.html</Path>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; ArbiterResolvedDependency &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_resolved_dependency_01_4.html</Path>
    <Anchor>ab6d05191b6b9d8e4b686b13c0967819c</Anchor>
    <DeclaredIn>Dependency.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; ArbiterSelectedVersion &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; ArbiterSelectedVersion &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_selected_version_01_4.html</Path>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; ArbiterSelectedVersion &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_selected_version_01_4.html</Path>
    <Anchor>a6744c141eb2a586ceebc96f48ffc5f2f</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; ArbiterSemanticVersion &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; ArbiterSemanticVersion &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_semantic_version_01_4.html</Path>
    <DeclaredIn>/Users/jspahrsummers/GitHub/Arbiter/src/Version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; ArbiterSemanticVersion &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01_arbiter_semantic_version_01_4.html</Path>
    <Anchor>ab1bd00e42611309a39fced68de6bc8da</Anchor>
    <DeclaredIn>Version.h</DeclaredIn>
  </Token>
</Tokens>
